SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS](
	[CLIENT_BOX_TRANS_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[BOX_NO] [int] NOT NULL,
	[TRANSMIT_NO] [bigint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[IS_COMPILED] [bit] NOT NULL,
	[COMPLIE_DATE] [datetime] NULL,
	[COMPILE_USER_NO] [smallint] NULL,
	[COMPILE_LOGON_NO] [bigint] NULL,
 CONSTRAINT [PK_TRN_CLIENT_DEPT_BOXES_TRANS] PRIMARY KEY CLUSTERED 
(
	[CLIENT_BOX_TRANS_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE NONCLUSTERED INDEX [IX_TRN_CLIENT_DEPT_BOXES_TRANS] ON [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS] 
(
	[CLIENT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CLIENT_DEPT_BOXES_TRANS_2] ON [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS] 
(
	[BOX_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_DEPT_BOXES](
	[BOX_NO] [int] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[PROD_TYPE_NO] [tinyint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[CLIENT_BOX_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IS_BLACK_BOX] [bit] NOT NULL,
	[CHALLAN_NO] [int] NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NULL,
	[TRANSMIT_NO] [bigint] NULL,
	[LAST_TRN_DATE] [date] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[RECALL_BOX_NO] [int] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENT_DEPT_BOXES] PRIMARY KEY CLUSTERED 
(
	[BOX_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENT_DEPT_BOXES] ON [dbo].[SET_CLIENT_DEPT_BOXES] 
(
	[CLIENT_NO] ASC,
	[CLIENT_BOX_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_CLIENT_DEPT_BOXES_1] ON [dbo].[SET_CLIENT_DEPT_BOXES] 
(
	[TRN_TYPE_NO] ASC,
	[REQ_TYPE_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SET_CLIENT_DEPT_BOXES_UPDATE] 
@BOX_NO		int	 , 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@PROD_TYPE_NO	tinyint =	NULL , 
@ARCHIVE_DATE	date =	NULL , 
@CLIENT_BOX_ID	varchar(50) =	NULL , 
@CHALLAN_NO		int =	NULL , 
@TRN_TYPE_NO	tinyint =	NULL , 
@REQ_TYPE_NO	tinyint =	NULL , 
@TRANSMIT_NO	bigint =	NULL , 
@IS_OLD_DATA	bit =	NULL , 
@RECALL_BOX_NO	int =	NULL , 
@UPDATE_USER_NO	int	 =	NULL , 
@UPDATE_LOGON_NO	bigint	 =	NULL  
AS 
BEGIN 
	UPDATE SET_CLIENT_DEPT_BOXES SET 
		CLIENT_NO	=	@CLIENT_NO , 
		DEPT_NO	 =	@DEPT_NO , 
		PROD_TYPE_NO	=	@PROD_TYPE_NO , 
		ARCHIVE_DATE	=	@ARCHIVE_DATE , 
		CLIENT_BOX_ID	=	@CLIENT_BOX_ID , 
		CHALLAN_NO		=	@CHALLAN_NO , 
		TRN_TYPE_NO	=	@TRN_TYPE_NO , 
		REQ_TYPE_NO	=	@REQ_TYPE_NO , 
		TRANSMIT_NO	=	@TRANSMIT_NO , 
		IS_OLD_DATA	=	@IS_OLD_DATA , 
		RECALL_BOX_NO	=	@RECALL_BOX_NO , 
		UPDATE_USER_NO	=	@UPDATE_USER_NO , 
		UPDATE_LOGON_NO =	@UPDATE_LOGON_NO ,   
		UPDATE_TIME = GETDATE() 
	WHERE BOX_NO = @BOX_NO; 
END;  
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SET_CLIENT_DEPT_BOXES_RECALL_UPDATE] 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@CLIENT_BOX_ID	varchar(50) =	NULL ,  
@RECALL_BOX_NO	int =	NULL , 
@UPDATE_USER_NO	int	 =	NULL , 
@UPDATE_LOGON_NO	bigint	 =	NULL  
AS 
DECLARE @BOX_NO INT = null;
DECLARE @B_NO INT = null;
DECLARE @RECALL_B_NO INT = null;
DECLARE @client_b_id varchar(50) = null;

BEGIN 

	SET @BOX_NO = (SELECT BOX_NO FROM SET_CLIENT_DEPT_BOXES 
								WHERE CLIENT_BOX_ID = @CLIENT_BOX_ID
								AND CLIENT_NO = @CLIENT_NO
								AND DEPT_NO = @DEPT_NO
						)	
				 
			UPDATE SET_CLIENT_DEPT_BOXES SET 
				CLIENT_NO	=	@CLIENT_NO , 
				DEPT_NO	 =	@DEPT_NO , 
				CLIENT_BOX_ID	=	@CLIENT_BOX_ID ,  
				RECALL_BOX_NO	=	NULL , 
				UPDATE_USER_NO	=	@UPDATE_USER_NO , 
				UPDATE_LOGON_NO =	@UPDATE_LOGON_NO ,   
				UPDATE_TIME = GETDATE() 
			WHERE BOX_NO = @BOX_NO; 
			
			
			UPDATE SET_CLIENT_DEPT_BOXES SET 
				CLIENT_NO	=	@CLIENT_NO , 
				DEPT_NO	 =	@DEPT_NO , 
				CLIENT_BOX_ID	=	@CLIENT_BOX_ID ,  
				RECALL_BOX_NO	=	@RECALL_BOX_NO , 
				UPDATE_USER_NO	=	@UPDATE_USER_NO , 
				UPDATE_LOGON_NO =	@UPDATE_LOGON_NO ,   
				UPDATE_TIME = GETDATE() 
			WHERE BOX_NO = @BOX_NO; 		
		
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SET_CLIENT_DEPT_BOXES_RECALL_DELETE
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@CLIENT_BOX_ID	varchar(50) =	NULL ,  
@RECALL_BOX_NO	int =	NULL , 
@UPDATE_USER_NO	int	 =	NULL , 
@UPDATE_LOGON_NO	bigint	 =	NULL  
AS 
DECLARE @BOX_NO INT = null;
BEGIN 

	SET @BOX_NO = (SELECT BOX_NO FROM SET_CLIENT_DEPT_BOXES 
								WHERE CLIENT_BOX_ID = @CLIENT_BOX_ID
								AND CLIENT_NO = @CLIENT_NO
								AND DEPT_NO = @DEPT_NO
						)	
						
			IF(@BOX_NO >0)
			BEGIN							 
				UPDATE SET_CLIENT_DEPT_BOXES SET 
					CLIENT_NO	=	@CLIENT_NO , 
					DEPT_NO	 =	@DEPT_NO , 
					CLIENT_BOX_ID	=	@CLIENT_BOX_ID ,  
					RECALL_BOX_NO	=	NULL , 
					UPDATE_USER_NO	=	@UPDATE_USER_NO , 
					UPDATE_LOGON_NO =	@UPDATE_LOGON_NO ,   
					UPDATE_TIME = GETDATE() 
				WHERE BOX_NO = @BOX_NO; 
			END
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SET_CLIENT_DEPT_BOXES_INSERT 
@BOX_NO		int	OUTPUT , 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@PROD_TYPE_NO	tinyint =	NULL , 
@ARCHIVE_DATE	date =	NULL , 
@CLIENT_BOX_ID	varchar(50) =	NULL , 
@CHALLAN_NO		int =	NULL , 
@TRN_TYPE_NO	tinyint =	NULL , 
@REQ_TYPE_NO	tinyint =	NULL , 
@TRANSMIT_NO	bigint =	NULL , 
@IS_OLD_DATA	bit =	NULL , 
@RECALL_BOX_NO	int =	NULL , 
@CREATE_USER_NO	int =	NULL , 
@CREATE_LOGON_NO	bigint	 =	NULL 
AS 
BEGIN 
	INSERT INTO SET_CLIENT_DEPT_BOXES(
			CLIENT_NO , 
			DEPT_NO , 
			PROD_TYPE_NO , 
			ARCHIVE_DATE , 
			CLIENT_BOX_ID , 
			CHALLAN_NO , 
			TRN_TYPE_NO ,
			REQ_TYPE_NO , 
			TRANSMIT_NO , 
			IS_OLD_DATA , 
			RECALL_BOX_NO , 
			CREATE_USER_NO , 
			CREATE_LOGON_NO 
		) 
	VALUES (
			@CLIENT_NO , 
			@DEPT_NO , 
			@PROD_TYPE_NO , 
			@ARCHIVE_DATE , 
			@CLIENT_BOX_ID , 
			@CHALLAN_NO , 
			@TRN_TYPE_NO ,
			@REQ_TYPE_NO , 
			@TRANSMIT_NO , 
			@IS_OLD_DATA , 
			@RECALL_BOX_NO , 
			@CREATE_USER_NO , 
			@CREATE_LOGON_NO 	
		); 
	
	SET @BOX_NO = SCOPE_IDENTITY(); 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_DEPT_BOXES_GET_PAGED   
@CNT	bigint OUTPUT , 
@BOX_NO	int	=	NULL , 
@CLIENT_NO	smallint	=	NULL , 
@DEPT_NO	smallint	=	NULL , 
@PROD_TYPE_NO	tinyint	=	NULL , 
@CLIENT_BOX_ID	varchar(50) 	=	NULL , 
@CHALLAN_NO	int	=	NULL , 
@TRN_TYPE_NO	tinyint	=	NULL , 
@REQ_TYPE_NO	tinyint	=	NULL , 
@TRANSMIT_NO	bigint	=	NULL , 
@IS_OLD_DATA	bit	=	NULL , 
@RECALL_BOX_NO	int	=	NULL  

AS 
BEGIN  
		SELECT @CNT = ISNULL(COUNT(BX.BOX_NO), 0)   			
		FROM SET_CLIENT_DEPT_BOXES BX  	
		WHERE (BX.BOX_NO = @BOX_NO OR @BOX_NO IS NULL) 
		AND (BX.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (BX.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.PROD_TYPE_NO = @PROD_TYPE_NO OR @PROD_TYPE_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (BX.CHALLAN_NO = @CHALLAN_NO OR @CHALLAN_NO IS NULL) 
		AND (BX.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (BX.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (BX.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (BX.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
		AND (BX.RECALL_BOX_NO = @RECALL_BOX_NO OR @RECALL_BOX_NO IS NULL) 	
	;
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SET_CLIENT_DEPT_BOXES_DELETE  
@BOX_NO		int	 
AS 
BEGIN
	DELETE FROM SET_CLIENT_DEPT_BOXES 
	WHERE BOX_NO = @BOX_NO;  
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CLIENT_BATCHES_TRANS](
	[BATCH_TRANS_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [int] NOT NULL,
	[BATCH_NO] [int] NOT NULL,
	[TRANSMIT_NO] [bigint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[IS_COMPILED] [bit] NOT NULL,
	[COMPLIE_DATE] [datetime] NULL,
	[COMPILE_USER_NO] [smallint] NULL,
	[COMPILE_LOGON_NO] [bigint] NULL,
 CONSTRAINT [PK_TRN_CLIENT_BATCHES_TRANS] PRIMARY KEY CLUSTERED 
(
	[BATCH_TRANS_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE NONCLUSTERED INDEX [IX_TRN_CLIENT_BATCHES_TRANS] ON [dbo].[TRN_CLIENT_BATCHES_TRANS] 
(
	[CLIENT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CLIENT_BATCHES_TRANS_1] ON [dbo].[TRN_CLIENT_BATCHES_TRANS] 
(
	[TRANSMIT_NO] ASC,
	[BATCH_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_BATCHES](
	[BATCH_NO] [int] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[BOX_NO] [int] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[BATCH_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BATCH_DETAILS] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NULL,
	[TRANSMIT_NO] [bigint] NULL,
	[LAST_TRN_DATE] [date] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENT_BATCHES] PRIMARY KEY CLUSTERED 
(
	[BATCH_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENT_BATCHES] ON [dbo].[SET_CLIENT_BATCHES] 
(
	[BOX_NO] ASC,
	[BATCH_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_CLIENT_BATCHES_1] ON [dbo].[SET_CLIENT_BATCHES] 
(
	[TRN_TYPE_NO] ASC,
	[REQ_TYPE_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_BATCHES_UPDATE  
@BATCH_NO	int  , 
@CLIENT_NO	smallint = NULL , 
@BOX_NO	int	 = NULL , 
@ARCHIVE_DATE	date = NULL , 
@BATCH_ID	varchar(10) = NULL , 
@BATCH_DETAILS	varchar(500) = NULL , 
@TRN_TYPE_NO	tinyint	 = NULL , 
@REQ_TYPE_NO	tinyint	 = NULL , 
@TRANSMIT_NO	bigint	 = NULL , 
@LAST_TRN_DATE	date	 = NULL , 
@IS_OLD_DATA	bit	 = NULL , 
@UPDATE_USER_NO	int	 = NULL , 
@UPDATE_LOGON_NO	bigint	 = NULL  	
AS 
BEGIN 
	UPDATE SET_CLIENT_BATCHES SET 
		CLIENT_NO	 = @CLIENT_NO , 
		BOX_NO	 = @BOX_NO , 
		ARCHIVE_DATE	= @ARCHIVE_DATE , 
		BATCH_ID	= @BATCH_ID , 
		BATCH_DETAILS	= @BATCH_DETAILS , 
		TRN_TYPE_NO	= @TRN_TYPE_NO , 
		REQ_TYPE_NO	= @REQ_TYPE_NO , 
		TRANSMIT_NO	= @TRANSMIT_NO , 
		LAST_TRN_DATE	= @LAST_TRN_DATE , 
		IS_OLD_DATA	= @IS_OLD_DATA , 
		UPDATE_USER_NO	= @UPDATE_USER_NO , 
		UPDATE_LOGON_NO = @UPDATE_LOGON_NO ,   	
		UPDATE_TIME = GETDATE() 
	WHERE BATCH_NO = @BATCH_NO; 
END;  
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_BATCHES_INSERT 
@BATCH_NO	int OUTPUT , 
@CLIENT_NO	smallint = NULL , 
@BOX_NO	int	 = NULL , 
@ARCHIVE_DATE	date = NULL , 
@BATCH_ID	varchar(10) = NULL , 
@BATCH_DETAILS	varchar(500) = NULL , 
@TRN_TYPE_NO	tinyint	 = NULL , 
@REQ_TYPE_NO	tinyint	 = NULL , 
@TRANSMIT_NO	bigint	 = NULL , 
@LAST_TRN_DATE	date	 = NULL , 
@IS_OLD_DATA	bit	 = NULL , 
@CREATE_USER_NO	int	 = NULL , 
@CREATE_LOGON_NO	bigint	 = NULL  
AS 
BEGIN  
	INSERT INTO SET_CLIENT_BATCHES (
		CLIENT_NO , 
		BOX_NO	, 
		ARCHIVE_DATE	, 
		BATCH_ID	, 
		BATCH_DETAILS	, 
		TRN_TYPE_NO , 
		REQ_TYPE_NO , 
		TRANSMIT_NO , 
		LAST_TRN_DATE , 
		IS_OLD_DATA , 
		CREATE_USER_NO , 
		CREATE_LOGON_NO 
	) 
	VALUES ( 
		@CLIENT_NO , 
		@BOX_NO	, 
		@ARCHIVE_DATE	, 
		@BATCH_ID	, 
		@BATCH_DETAILS	, 
		@TRN_TYPE_NO , 
		@REQ_TYPE_NO , 
		@TRANSMIT_NO , 
		@LAST_TRN_DATE , 
		@IS_OLD_DATA , 
		@CREATE_USER_NO , 
		@CREATE_LOGON_NO 	
	); 
	
	SET @BATCH_NO = SCOPE_IDENTITY(); 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENT_BATCHES_GET_PAGED]  
	@CNT	bigint OUTPUT , 
	@BATCH_NO	int	=	NULL , 
	@BATCH_ID	varchar(10) = NULL , 
	@BOX_NO	int	=	NULL , 
	@CLIENT_BOX_ID	VARCHAR(50) = NULL , 
	@CLIENT_NO	smallint	=	NULL , 		
	@ARCHIVE_DATE	date = NULL , 	
	@TRN_TYPE_NO	tinyint	=	NULL , 
	@REQ_TYPE_NO	tinyint	=	NULL , 
	@TRANSMIT_NO	bigint	=	NULL , 
	@IS_OLD_DATA	bit	=	NULL 
AS 
BEGIN 
	SELECT @CNT = ISNULL(COUNT(BT.BATCH_NO), 0)   			
		FROM SET_CLIENT_BATCHES BT  	
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO  
		WHERE (BT.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (BT.BOX_NO = @BOX_NO OR @BOX_NO IS NULL) 	
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (BT.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 		
		AND (BT.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 		
		AND (BT.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (BT.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 						
		AND (BT.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (BT.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
		;
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_BATCHES_DELETE   
@BATCH_NO	int  
AS 
BEGIN 
	DELETE FROM  SET_CLIENT_BATCHES 
	WHERE BATCH_NO = @BATCH_NO; 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_ATTACHS](
	[ATTACH_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[DOC_NO] [bigint] NOT NULL,
	[ATTACH_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_LOCATION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_TYPE] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_EXT] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_SET_CLIENT_ATTACHS] PRIMARY KEY CLUSTERED 
(
	[ATTACH_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ATTACHS_INSERT  
@ATTACH_NO	bigint	OUTPUT , 
@DOC_NO		bigint	= NULL , 
@ATTACH_NAME	varchar(100)	= NULL , 
@FILE_LOCATION	varchar(100)	= NULL , 
@FILE_TYPE	varchar(100)	= NULL , 
@FILE_EXT	varchar(100)	= NULL 
AS 
BEGIN 
	INSERT INTO SET_CLIENT_ATTACHS ( 
		DOC_NO	,
		ATTACH_NAME	,
		FILE_LOCATION	,	
		FILE_TYPE	,	
		FILE_EXT		
	) VALUES ( 
		@DOC_NO	, 
		@ATTACH_NAME	, 
		@FILE_LOCATION	, 
		@FILE_TYPE	, 
		@FILE_EXT 	
	); 
	
	SET @ATTACH_NO = SCOPE_IDENTITY(); 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ATTACHS_DELETE   
@ATTACH_NO	bigint	
AS 
BEGIN 
	DELETE FROM SET_CLIENT_ATTACHS WHERE ATTACH_NO = @ATTACH_NO ; 	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CLIENT_ACCOUNTS_TRANS](
	[ACC_TRANS_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [int] NOT NULL,
	[ACC_NO] [bigint] NOT NULL,
	[TRANSMIT_NO] [bigint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[IS_COMPILED] [bit] NOT NULL,
	[COMPLIE_DATE] [datetime] NULL,
	[COMPILE_USER_NO] [smallint] NULL,
	[COMPILE_LOGON_NO] [bigint] NULL,
 CONSTRAINT [PK_TRN_CLIENT_ACCOUNTS_TRANS] PRIMARY KEY CLUSTERED 
(
	[ACC_TRANS_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE NONCLUSTERED INDEX [IX_TRN_CLIENT_ACCOUNTS_TRANS] ON [dbo].[TRN_CLIENT_ACCOUNTS_TRANS] 
(
	[CLIENT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CLIENT_ACCOUNTS_TRANS_1] ON [dbo].[TRN_CLIENT_ACCOUNTS_TRANS] 
(
	[TRANSMIT_NO] ASC,
	[ACC_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_ACCOUNTS](
	[ACC_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[BATCH_NO] [int] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[ACC_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACC_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ACC_DETAILS] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NULL,
	[TRANSMIT_NO] [bigint] NULL,
	[LAST_TRN_DATE] [date] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENT_ACCOUNTS] PRIMARY KEY CLUSTERED 
(
	[ACC_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENT_ACCOUNTS] ON [dbo].[SET_CLIENT_ACCOUNTS] 
(
	[CLIENT_NO] ASC,
	[ACC_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_CLIENT_ACCOUNTS_1] ON [dbo].[SET_CLIENT_ACCOUNTS] 
(
	[TRN_TYPE_NO] ASC,
	[REQ_TYPE_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACCOUNTS_UPDATE  
@ACC_NO	bigint	 , 
@CLIENT_NO	smallint = NULL ,
@DEPT_NO	smallint = NULL ,
@BATCH_NO	int = NULL ,
@ARCHIVE_DATE	date = NULL ,
@ACC_ID	varchar(50) = NULL ,
@ACC_NAME	varchar(100) = NULL ,
@ACC_DETAILS	varchar(500) = NULL ,
@TRN_TYPE_NO	tinyint = NULL ,
@REQ_TYPE_NO	tinyint = NULL ,
@TRANSMIT_NO	bigint = NULL ,
@LAST_TRN_DATE	date = NULL ,
@IS_OLD_DATA	bit = NULL ,
@UPDATE_USER_NO	int = NULL ,
@UPDATE_LOGON_NO	bigint = NULL 
AS 
BEGIN 
	UPDATE SET_CLIENT_ACCOUNTS SET  
		CLIENT_NO	= @CLIENT_NO ,
		DEPT_NO	= @DEPT_NO ,
		BATCH_NO	= @BATCH_NO ,
		ARCHIVE_DATE	= @ARCHIVE_DATE ,
		ACC_ID	= @ACC_ID ,
		ACC_NAME	= @ACC_NAME ,
		ACC_DETAILS	= @ACC_DETAILS ,
		TRN_TYPE_NO	= @TRN_TYPE_NO ,
		REQ_TYPE_NO	= @REQ_TYPE_NO ,
		TRANSMIT_NO	= @TRANSMIT_NO ,
		LAST_TRN_DATE	= @LAST_TRN_DATE ,
		IS_OLD_DATA	= @IS_OLD_DATA ,
		UPDATE_USER_NO	= @UPDATE_USER_NO ,
		UPDATE_LOGON_NO = @UPDATE_LOGON_NO  , 	
		UPDATE_TIME = GETDATE() 
	WHERE ACC_NO = @ACC_NO; 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENT_ACCOUNTS_INSERT] 
@ACC_NO	bigint	OUTPUT , 
@CLIENT_NO	smallint = NULL ,
@DEPT_NO	smallint = NULL ,
@BATCH_NO	int = NULL ,
@ARCHIVE_DATE	date = NULL ,
@ACC_ID	varchar(50) = NULL ,
@ACC_NAME	varchar(100) = NULL ,
@ACC_DETAILS	varchar(500) = NULL ,
@TRN_TYPE_NO	tinyint = NULL ,
@REQ_TYPE_NO	tinyint = NULL ,
@TRANSMIT_NO	bigint = NULL ,
@LAST_TRN_DATE	date = NULL ,
@IS_OLD_DATA	bit = NULL ,
@CREATE_USER_NO	int = NULL ,
@CREATE_LOGON_NO	bigint = NULL 
AS 
BEGIN 
	INSERT INTO SET_CLIENT_ACCOUNTS ( 
		CLIENT_NO	, 
		DEPT_NO		,
		BATCH_NO	, 
		ARCHIVE_DATE	, 
		ACC_ID	, 
		ACC_NAME	, 
		ACC_DETAILS	, 
		TRN_TYPE_NO	, 
		REQ_TYPE_NO	, 
		TRANSMIT_NO	, 
		LAST_TRN_DATE	, 
		IS_OLD_DATA			
	) 
	VALUES ( 
		@CLIENT_NO	, 
		@DEPT_NO		,
		@BATCH_NO	, 
		@ARCHIVE_DATE	, 
		@ACC_ID	, 
		@ACC_NAME	, 
		@ACC_DETAILS	, 
		@TRN_TYPE_NO	, 
		@REQ_TYPE_NO	, 
		@TRANSMIT_NO	, 
		@LAST_TRN_DATE	, 
		@IS_OLD_DATA		
	);
	
	SET @ACC_NO = SCOPE_IDENTITY(); 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACCOUNTS_GET_PAGED   
@CNT	bigint OUTPUT , 
@ACC_NO	bigint	= NULL , 
@CLIENT_NO	smallint 	= NULL , 	
@DEPT_NO	smallint 	= NULL , 
@CLIENT_BOX_ID	varchar(50) = NULL , 		
@BATCH_NO	int		= NULL , 
@BATCH_ID	varchar(50) = NULL , 		
@ARCHIVE_DATE	date		= NULL , 
@ACC_ID	varchar(50)		= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint 	= NULL , 
@IS_OLD_DATA	bit	= NULL 

AS 
BEGIN 
		SELECT @CNT = ISNULL(COUNT(A.ACC_NO), 0)     			
		FROM SET_CLIENT_ACCOUNTS A 
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		WHERE (A.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
		AND (A.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (A.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (A.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (A.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 
		AND (A.ACC_ID = @ACC_ID OR @ACC_ID IS NULL) 
		AND (A.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (A.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (A.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (A.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL)  	
	; 

END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACCOUNTS_DELETE   
@ACC_NO	bigint	 
AS 
BEGIN
	DELETE FROM SET_CLIENT_ACCOUNTS WHERE ACC_NO = @ACC_NO; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CLIENT_ACC_DOCS_TRANS](
	[DOC_TRANS_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[DOC_NO] [bigint] NOT NULL,
	[TRANSMIT_NO] [bigint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[IS_COMPILED] [bit] NOT NULL,
	[COMPLIE_DATE] [datetime] NULL,
	[COMPILE_USER_NO] [smallint] NULL,
	[COMPILE_LOGON_NO] [bigint] NULL,
 CONSTRAINT [PK_TRN_CLIENT_ACC_DOCS_TRANS] PRIMARY KEY CLUSTERED 
(
	[DOC_TRANS_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CLIENT_ACC_DOCS_TRANS_1] ON [dbo].[TRN_CLIENT_ACC_DOCS_TRANS] 
(
	[TRANSMIT_NO] ASC,
	[DOC_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_ACC_DOCS](
	[DOC_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[ACC_NO] [bigint] NOT NULL,
	[DOC_TYPE_NO] [smallint] NOT NULL,
	[ARCHIVE_DATE] [date] NOT NULL,
	[DOC_DETAILS] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NULL,
	[TRANSMIT_NO] [bigint] NULL,
	[LAST_TRN_DATE] [date] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENT_ACC_DOCS] PRIMARY KEY CLUSTERED 
(
	[DOC_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE NONCLUSTERED INDEX [IX_SET_CLIENT_ACC_DOCS] ON [dbo].[SET_CLIENT_ACC_DOCS] 
(
	[DOC_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_CLIENT_ACC_DOCS_1] ON [dbo].[SET_CLIENT_ACC_DOCS] 
(
	[TRN_TYPE_NO] ASC,
	[REQ_TYPE_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACC_DOCS_UPDATE   
@DOC_NO	bigint	 , 
@ACC_NO	bigint	= NULL , 
@DOC_TYPE_NO	smallint	= NULL , 
@ARCHIVE_DATE	date	= NULL , 
@DOC_DETAILS	varchar(100)	= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint	= NULL , 
@LAST_TRN_DATE	date	= NULL , 
@IS_OLD_DATA	bit	= NULL , 
@UPDATE_USER_NO	int	= NULL , 
@UPDATE_LOGON_NO	bigint	= NULL 
AS 
BEGIN  
	UPDATE SET_CLIENT_ACC_DOCS SET 
		ACC_NO	= @ACC_NO , 
		DOC_TYPE_NO	= @DOC_TYPE_NO , 
		ARCHIVE_DATE	= @ARCHIVE_DATE , 
		DOC_DETAILS	= @DOC_DETAILS , 
		TRN_TYPE_NO	= @TRN_TYPE_NO , 
		REQ_TYPE_NO	= @REQ_TYPE_NO , 
		TRANSMIT_NO	= @TRANSMIT_NO , 
		LAST_TRN_DATE	= @LAST_TRN_DATE , 
		IS_OLD_DATA	= @IS_OLD_DATA , 
		UPDATE_USER_NO	= @UPDATE_USER_NO , 
		UPDATE_LOGON_NO	= @UPDATE_LOGON_NO , 
		UPDATE_TIME = GETDATE() 	
	WHERE DOC_NO = @DOC_NO;
	
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACC_DOCS_INSERT 
@DOC_NO	bigint	OUTPUT , 
@ACC_NO	bigint	= NULL , 
@DOC_TYPE_NO	smallint	= NULL , 
@ARCHIVE_DATE	date	= NULL , 
@DOC_DETAILS	varchar(100)	= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint	= NULL , 
@LAST_TRN_DATE	date	= NULL , 
@IS_OLD_DATA	bit	= NULL , 
@CREATE_USER_NO	int	= NULL , 
@CREATE_LOGON_NO	bigint	= NULL 
AS 
BEGIN 
	INSERT INTO SET_CLIENT_ACC_DOCS (
		ACC_NO	, 
		DOC_TYPE_NO	, 
		ARCHIVE_DATE	, 
		DOC_DETAILS	, 
		TRN_TYPE_NO	, 
		REQ_TYPE_NO	, 
		TRANSMIT_NO	, 
		LAST_TRN_DATE	, 
		IS_OLD_DATA	, 
		CREATE_USER_NO	, 
		CREATE_LOGON_NO
	) VALUES (
		@ACC_NO	, 
		@DOC_TYPE_NO	, 
		@ARCHIVE_DATE	, 
		@DOC_DETAILS	, 
		@TRN_TYPE_NO	, 
		@REQ_TYPE_NO	, 
		@TRANSMIT_NO	, 
		@LAST_TRN_DATE	, 
		@IS_OLD_DATA	, 
		@CREATE_USER_NO	, 
		@CREATE_LOGON_NO	
	); 
	
	SET @DOC_NO = SCOPE_IDENTITY(); 
	 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACC_DOCS_DELETE    
@DOC_NO	bigint	 
AS 
BEGIN  
	DELETE FROM SET_CLIENT_ACC_DOCS WHERE DOC_NO = @DOC_NO;
	
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_IMAGE_BY_ATTACH_NO]
@CLIENT_NO BIGINT = NULL,
@ATTACH_NO BIGINT = NULL
AS
BEGIN
SELECT SA.DOC_NO, SA.ATTACH_NAME, SA.FILE_LOCATION, SA.FILE_TYPE, SA.FILE_EXT 
			FROM SET_CLIENT_ATTACHS SA
			 JOIN SET_CLIENT_ACC_DOCS SAD
			 ON SA.DOC_NO = SAD.DOC_NO
			 JOIN SET_CLIENT_ACCOUNTS SSA
			 ON SAD.ACC_NO = SSA.ACC_NO
        where SA.ATTACH_NO = @ATTACH_NO
        AND  SSA.CLIENT_NO = @CLIENT_NO
        
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GET_ALL_IMAGE_URL
AS
BEGIN
	SELECT ATTACH_NO,DOC_NO, (FILE_LOCATION + '/' + CONVERT(nvarchar,ATTACH_NO) + '' + ISNULL('' + FILE_EXT, '')) AS IMAGE_URL from SET_CLIENT_ATTACHS
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_ROLES](
	[ROLE_NO] [int] IDENTITY(1,1) NOT NULL,
	[ROLE_NAME] [varchar](250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ROLE_DESC] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_ACTIVE] [bit] NULL,
	[ACTIVE_FROM] [datetime] NULL,
	[ACTIVE_TO] [datetime] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SEC_ROLES] PRIMARY KEY CLUSTERED 
(
	[ROLE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SEC_ROLES] ON [dbo].[SEC_ROLES] 
(
	[ROLE_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_MENU_TYPES](
	[MENU_TYPE_NO] [smallint] NOT NULL,
	[MENU_TYPE] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 CONSTRAINT [PK_GEN_MENU_TYPES] PRIMARY KEY CLUSTERED 
(
	[MENU_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_MENU_TYPES] ON [dbo].[GEN_MENU_TYPES] 
(
	[MENU_TYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_USER_TYPES](
	[USER_TYPE_NO] [smallint] NOT NULL,
	[USER_TYPE] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[USER_TYPE_DESC] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_GEN_USER_TYPES] PRIMARY KEY CLUSTERED 
(
	[USER_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_USER_TYPES] ON [dbo].[GEN_USER_TYPES] 
(
	[USER_TYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_COMPANY_INFO](
	[COMP_NO] [tinyint] IDENTITY(1,1) NOT NULL,
	[COMP_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[KEY_FEATURE] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ADDR] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PHONE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MOBILE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FAX] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EMAIL_ADDR] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LAST_NEW_TRANS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LAST_TRANS_IN_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LAST_TRANS_OUT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_GEN_COMPANY_INFO] PRIMARY KEY CLUSTERED 
(
	[COMP_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_CONTROL_ACTIONS](
	[ACTION_NO] [int] IDENTITY(1,1) NOT NULL,
	[CONTROLLER_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACTION_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DETAIL_DESC] [varchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_GEN_CONTROL_ACTIONS] PRIMARY KEY CLUSTERED 
(
	[ACTION_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_CONTROL_ACTIONS] ON [dbo].[GEN_CONTROL_ACTIONS] 
(
	[CONTROLLER_NAME] ASC,
	[ACTION_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_TRANSMIT_REQUEST_TYPES](
	[REQ_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[REQ_TYPE_CODE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 CONSTRAINT [PK_GEN_TRANSMIT_REQUEST_TYPES] PRIMARY KEY CLUSTERED 
(
	[REQ_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_TRANSMIT_REQUEST_TYPES] ON [dbo].[GEN_TRANSMIT_REQUEST_TYPES] 
(
	[REQ_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_TRANSMIT_REQUEST_TYPES_1] ON [dbo].[GEN_TRANSMIT_REQUEST_TYPES] 
(
	[REQ_TYPE_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_TRANSMIT_TYPES](
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[TRN_TYPE_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TRANSMIT_PREFIX] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_GEN_TRANSMIT_TYPES] PRIMARY KEY CLUSTERED 
(
	[TRN_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_TRANSMIT_TYPES] ON [dbo].[GEN_TRANSMIT_TYPES] 
(
	[TRN_TYPE_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENTS](
	[CLIENT_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CLIENT_ALIAS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CLIENT_ADDR] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CLIENT_CONTACT] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTACT_PERSON] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTACT_ADDR] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DESIGNATION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ATTENTION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EMAIL_ADDR] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_ACIVE] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENTS] PRIMARY KEY CLUSTERED 
(
	[CLIENT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENTS] ON [dbo].[SET_CLIENTS] 
(
	[CLIENT_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENTS_1] ON [dbo].[SET_CLIENTS] 
(
	[CLIENT_ALIAS] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_DOCS_TYPES](
	[DOC_TYPE_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[DOC_TYPE] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DOC_TYPE_CODE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 CONSTRAINT [PK_SET_DOCS_TYPES] PRIMARY KEY CLUSTERED 
(
	[DOC_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_DOCS_TYPES] ON [dbo].[SET_DOCS_TYPES] 
(
	[DOC_TYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_DOCS_TYPES_1] ON [dbo].[SET_DOCS_TYPES] 
(
	[DOC_TYPE_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ATTACHS_GET 
@ATTACH_NO	BIGINT = NULL , 
@DOC_NO	bigint	=	NULL	 , 
@ACC_NO	bigint	= NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN 
	SELECT R.* FROM ( 
		SELECT ROW_NUMBER() OVER (ORDER BY AT.ATTACH_NO ASC) AS ROWNUM ,  
			AT.ATTACH_NO	,	
			AT.DOC_NO	,	
			AD.ACC_NO , 
			AD.DOC_TYPE_NO	,	
			DT.DOC_TYPE	,	
			DT.DOC_TYPE_CODE	, 
			AT.ATTACH_NAME	,	
			AT.FILE_LOCATION	,	
			AT.FILE_TYPE	,	
			AT.FILE_EXT 
		FROM SET_CLIENT_ATTACHS AT 
		INNER JOIN SET_CLIENT_ACC_DOCS AD ON AD.DOC_NO = AT.DOC_NO 
		INNER JOIN SET_DOCS_TYPES DT ON DT.DOC_TYPE_NO = AD.DOC_TYPE_NO 
		WHERE (AT.ATTACH_NO = @ATTACH_NO OR @ATTACH_NO IS NULL)
		AND (AT.DOC_NO = @DOC_NO OR @DOC_NO IS NULL)
		AND (AD.ACC_NO = @ACC_NO OR @ACC_NO IS NULL)
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_ACC_DOCS_GET    
@DOC_NO	bigint	=	NULL	 , 
@ACC_NO	bigint	= NULL , 
@DOC_TYPE_NO	smallint	= NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 

AS 
BEGIN 
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY AD.DOC_NO ASC) AS ROWNUM ,  
			AD.DOC_NO	, 
			AD.ACC_NO	,	
			AD.DOC_TYPE_NO	,	
			DT.DOC_TYPE	,	
			DT.DOC_TYPE_CODE	, 
			AD.ARCHIVE_DATE	,	
			AD.DOC_DETAILS	,	
			AD.TRN_TYPE_NO	,	
			AD.REQ_TYPE_NO	,	
			AD.TRANSMIT_NO	,	
			AD.LAST_TRN_DATE	,	
			AD.IS_OLD_DATA	,	
			AD.CREATE_USER_NO	,	
			AD.CREATE_LOGON_NO	,	
			AD.CREATE_TIME	,	
			AD.UPDATE_USER_NO	,	
			AD.UPDATE_LOGON_NO	,	
			AD.UPDATE_TIME		
		FROM SET_CLIENT_ACC_DOCS AD 
		INNER JOIN SET_DOCS_TYPES DT ON DT.DOC_TYPE_NO = AD.DOC_TYPE_NO 
		WHERE (AD.DOC_NO = @DOC_NO OR @DOC_NO IS NULL) 
		AND (AD.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
		AND (AD.DOC_TYPE_NO = @DOC_TYPE_NO OR @DOC_TYPE_NO IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_PRODUCT_TYPES](
	[PROD_TYPE_NO] [tinyint] IDENTITY(1,1) NOT NULL,
	[PRODUCT_TYPE] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SHORT_CODE] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_PRODUCT_TYPES] PRIMARY KEY CLUSTERED 
(
	[PROD_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_PRODUCT_TYPES] ON [dbo].[SET_PRODUCT_TYPES] 
(
	[PRODUCT_TYPE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_PRODUCT_TYPES_1] ON [dbo].[SET_PRODUCT_TYPES] 
(
	[SHORT_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TBL_TEST_01](
	[ID_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[ID_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 CONSTRAINT [PK_TBL_TEST_01] PRIMARY KEY CLUSTERED 
(
	[ID_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[Split](@String varchar(MAX), @Delimiter char(1))     
returns @temptable TABLE (items varchar(8000))     
as     
begin     
    declare @idx int     
    declare @slice varchar(8000)     
    
    select @idx = 1     
        if len(@String)<1 or @String is null  return     
    
    while @idx!= 0     
    begin     
        set @idx = charindex(@Delimiter,@String)     
        if @idx!=0     
            set @slice = left(@String,@idx - 1)     
        else     
            set @slice = @String     
        
        if(len(@slice)>0)
            insert into @temptable(Items) values(@slice)     

        set @String = right(@String,len(@String) - @idx)     
        if len(@String) = 0 break     
    end 
return     
end
;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_ACCOUNTS_BULK_GET_PAGED]   
@CNT	bigint OUTPUT , 
@ACC_NO	bigint	= NULL , 
@CLIENT_NO	smallint 	= NULL , 	
@DEPT_NO	smallint 	= NULL , 
@CLIENT_BOX_ID	varchar(50) = NULL , 		
@BATCH_NO	int		= NULL , 
@BATCH_ID	varchar(50) = NULL , 		
@ARCHIVE_DATE	date		= NULL , 
@ACC_LIST	varchar(MAX)		= NULL , 
-- @ACC_ID	varchar(50)		= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint 	= NULL , 
@IS_OLD_DATA	bit	= NULL 

AS 
BEGIN 
		SELECT @CNT = ISNULL(COUNT(A.ACC_NO), 0)     			
		FROM SET_CLIENT_ACCOUNTS A 
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN Split(@ACC_LIST, ',') S ON LTRIM(RTRIM(S.items)) = A.ACC_ID 
		WHERE (A.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
		AND (A.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (A.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (A.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (A.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 
		-- AND (A.ACC_ID = @ACC_ID OR @ACC_ID IS NULL) 
		AND (A.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (A.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (A.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (A.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL)  	
	; 

END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_ACCOUNT_STATUS_CHECK_Manual]
@CLIENT_NO INT = NULL,
--@REQ_TYPE_NO INT = NULL,
@ACC_ID_LIST VARCHAR(MAX) = NULL
AS
--DECLARE @req_type_no INT;
BEGIN
--SET @req_type_no =(SELECT REQ_TYPE_NO FROM GEN_TRANSMIT_REQUEST_TYPES WHERE LTRIM(RTRIM(REQ_TYPE_NAME)) = LTRIM(RTRIM(@REQ_TYPE_NAME)));

SELECT a.TRN_TYPE_NO, COUNT(t.items) AS cnt   
FROM split(@ACC_ID_LIST, ',') AS t 
LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO 

GROUP BY a.trn_type_no 
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_ACCOUNT_STATUS_CHECK_BULK]
@CLIENT_NO INT = NULL,
@ACC_ID_LIST VARCHAR(MAX) = NULL
AS
BEGIN
SELECT a.TRN_TYPE_NO, COUNT(t.items) AS cnt   
FROM split(@ACC_ID_LIST, ',') AS t 
LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO
GROUP BY a.trn_type_no 
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_REASONS](
	[REASON_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[REASON] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_REASONS] PRIMARY KEY CLUSTERED 
(
	[REASON_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_REASONS] ON [dbo].[SET_REASONS] 
(
	[CLIENT_NO] ASC,
	[REASON] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SET_PRODUCT_TYPES_GET 
@PROD_TYPE_NO	tinyint = NULL , 
@PRODUCT_TYPE	varchar(100) = NULL , 
@SHORT_CODE	varchar(10) = NULL 
AS 
BEGIN 
	SELECT 
		P.PROD_TYPE_NO ,
		P.PRODUCT_TYPE ,
		P.SHORT_CODE , 
		P.CREATE_USER_NO  , 
		P.CREATE_LOGON_NO , 
		P.CREATE_TIME , 
		P.UPDATE_USER_NO , 
		P.UPDATE_LOGON_NO , 
		P.UPDATE_TIME
	FROM SET_PRODUCT_TYPES P 
	WHERE (P.PROD_TYPE_NO = @PROD_TYPE_NO OR @PROD_TYPE_NO IS NULL) 	
	AND (P.PROD_TYPE_NO = @PROD_TYPE_NO OR @PROD_TYPE_NO IS NULL) 
	AND (P.PROD_TYPE_NO = @PROD_TYPE_NO OR @PROD_TYPE_NO IS NULL) 
	ORDER BY P.PRODUCT_TYPE ASC; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_DOCS_TYPES_GET 
@DOC_TYPE_NO	smallint	= NULL , 
@DOC_TYPE	varchar(100)	= NULL , 
@DOC_TYPE_CODE	varchar(50)	= NULL 
AS 
BEGIN 
	SELECT 
		DT.DOC_TYPE_NO	, 
		DT.DOC_TYPE	, 
		DT.DOC_TYPE_CODE 		
	FROM SET_DOCS_TYPES DT 
	ORDER BY DT.DOC_TYPE_CODE ASC; 		
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SET_CLIENTS_GET] 
@CLIENT_NO	smallint = NULL , 
@IS_ACIVE	bit = NULL 
AS 
BEGIN 
	SELECT 
	C.CLIENT_NO	,
	C.CLIENT_NAME	,
	C.CLIENT_ALIAS	,
	C.CLIENT_ADDR	,
	C.CLIENT_CONTACT	,
	C.CONTACT_PERSON	,
	C.CONTACT_ADDR	,
	C.DESIGNATION	,
	C.ATTENTION	,
	C.EMAIL_ADDR	,
	C.IS_ACIVE	,
	C.CREATE_USER_NO	,
	C.CREATE_LOGON_NO	,
	C.CREATE_TIME	,
	C.UPDATE_USER_NO	,
	C.UPDATE_LOGON_NO	,
	C.UPDATE_TIME	

	FROM SET_CLIENTS C 
	WHERE (C.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
	AND (C.IS_ACIVE = @IS_ACIVE OR @IS_ACIVE IS NULL) 
	ORDER BY C.CLIENT_NAME	ASC ;
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_CLIENT_DEPARTMENTS](
	[DEPT_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPT_ADDR] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPT_CONTACT] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPT_EMAIL] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DELIVERY_LOCATION] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTACT_PERSON] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTACT_ADDR] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DESIGNATION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ATTENTION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_NEW_TRANSMIT] [bit] NULL,
	[IS_AUTO_ID] [bit] NULL,
	[NEXT_ID] [int] NULL,
	[ID_LENGHT] [tinyint] NULL,
	[ID_PREFIX] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_CLIENT_DEPARTMENTS] PRIMARY KEY CLUSTERED 
(
	[DEPT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_CLIENT_DEPARTMENTS] ON [dbo].[SET_CLIENT_DEPARTMENTS] 
(
	[CLIENT_NO] ASC,
	[DEPT_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SET_CLIENT_DEPT_BOXES_GET  
@BOX_NO	int	=	NULL , 
@CLIENT_NO	smallint	=	NULL , 
@DEPT_NO	smallint	=	NULL , 
@PROD_TYPE_NO	tinyint	=	NULL , 
@CLIENT_BOX_ID	varchar(50) 	=	NULL , 
@CHALLAN_NO	int	=	NULL , 
@TRN_TYPE_NO	tinyint	=	NULL , 
@REQ_TYPE_NO	tinyint	=	NULL , 
@TRANSMIT_NO	bigint	=	NULL , 
@IS_OLD_DATA	bit	=	NULL , 
@RECALL_BOX_NO	int	=	NULL  , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN  
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY BX.CLIENT_BOX_ID ASC) AS ROWNUM ,  
			BX.BOX_NO	, 
			BX.CLIENT_NO	,  
			C.CLIENT_NAME , 
			C.CLIENT_ALIAS , 
			
			BX.DEPT_NO	, 
			D.DEPT_NAME , 
			
			BX.PROD_TYPE_NO	, 
			P.PRODUCT_TYPE , 
			P.SHORT_CODE , 
			
			BX.ARCHIVE_DATE	, 
			BX.CLIENT_BOX_ID	, 
			BX.CHALLAN_NO	, 
			BX.TRN_TYPE_NO	, 
			T.TRN_TYPE_NAME , 
			
			BX.REQ_TYPE_NO	, 
			R.REQ_TYPE_NAME ,  
			
			BX.TRANSMIT_NO	, 
			BX.LAST_TRN_DATE	, 
			BX.IS_OLD_DATA	, 
			BX.RECALL_BOX_NO	, 
			BX.CREATE_USER_NO	, 
			BX.CREATE_LOGON_NO	, 
			BX.CREATE_TIME	, 
			BX.UPDATE_USER_NO	,	
			BX.UPDATE_LOGON_NO	, 
			BX.UPDATE_TIME 
		FROM SET_CLIENT_DEPT_BOXES BX  
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = BX.CLIENT_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		LEFT JOIN SET_PRODUCT_TYPES P ON P.PROD_TYPE_NO = BX.PROD_TYPE_NO 
		LEFT JOIN GEN_TRANSMIT_TYPES T ON T.TRN_TYPE_NO = BX.TRN_TYPE_NO 
		LEFT JOIN GEN_TRANSMIT_REQUEST_TYPES R ON R.REQ_TYPE_NO = BX.REQ_TYPE_NO  		
		WHERE (BX.BOX_NO = @BOX_NO OR @BOX_NO IS NULL) 
		AND (BX.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (BX.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.PROD_TYPE_NO = @PROD_TYPE_NO OR @PROD_TYPE_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (BX.CHALLAN_NO = @CHALLAN_NO OR @CHALLAN_NO IS NULL) 
		AND (BX.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (BX.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (BX.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (BX.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
		AND (BX.RECALL_BOX_NO = @RECALL_BOX_NO OR @RECALL_BOX_NO IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	;
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_BATCHES_GET]  
@BATCH_NO	int	=	NULL , 
@BATCH_ID	varchar(10) = NULL , 
@BOX_NO	int	=	NULL , 
@CLIENT_BOX_ID	varchar(50) = NULL , 
@CLIENT_NO	smallint	=	NULL , 	
@ARCHIVE_DATE	date = NULL , 	
@TRN_TYPE_NO	tinyint	=	NULL , 
@REQ_TYPE_NO	tinyint	=	NULL , 
@TRANSMIT_NO	bigint	=	NULL , 
@IS_OLD_DATA	bit	=	NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN  
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY BX.CLIENT_BOX_ID ASC) AS ROWNUM ,  
			BT.BATCH_NO , 
			BT.CLIENT_NO ,
			C.CLIENT_NAME , 
			C.CLIENT_ALIAS ,  
			BX.DEPT_NO	, 
			D.DEPT_NAME , 
			BT.BOX_NO , 
			BX.CLIENT_BOX_ID	, 
			BT.ARCHIVE_DATE , 
			BT.BATCH_ID , 
			BT.BATCH_DETAILS , 
			BT.TRN_TYPE_NO , 
			T.TRN_TYPE_NAME , 
			BT.REQ_TYPE_NO , 
			R.REQ_TYPE_NAME ,  
			BT.TRANSMIT_NO , 
			BT.LAST_TRN_DATE , 
			BT.IS_OLD_DATA , 
			BT.CREATE_USER_NO , 
			BT.CREATE_LOGON_NO , 
			BT.CREATE_TIME , 
			BT.UPDATE_USER_NO , 
			BT.UPDATE_LOGON_NO , 
			BT.UPDATE_TIME 			
		FROM SET_CLIENT_BATCHES BT  
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO  
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = BT.CLIENT_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		LEFT JOIN GEN_TRANSMIT_TYPES T ON T.TRN_TYPE_NO = BT.TRN_TYPE_NO 
		LEFT JOIN GEN_TRANSMIT_REQUEST_TYPES R ON R.REQ_TYPE_NO = BT.REQ_TYPE_NO  
				
		WHERE (BT.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (BT.BOX_NO = @BOX_NO OR @BOX_NO IS NULL) 	
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (BT.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 		
		AND (BT.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 		
		AND (BT.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (BT.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 						
		AND (BT.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (BT.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	;
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_ACCOUNTS_GET]  
@ACC_NO	bigint	= NULL , 
@CLIENT_NO	smallint 	= NULL , 	
@DEPT_NO	smallint 	= NULL , 
@CLIENT_BOX_ID	varchar(50) = NULL , 		
@BATCH_NO	int		= NULL , 
@BATCH_ID	varchar(50) = NULL , 		
@ARCHIVE_DATE	date		= NULL , 
@ACC_ID	varchar(50)		= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint 	= NULL , 
@IS_OLD_DATA	bit	= NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 

AS 
BEGIN 
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY A.ACC_ID ASC) AS ROWNUM ,  
			A.ACC_NO	,
			A.CLIENT_NO	,
			C.CLIENT_NAME,
			A.DEPT_NO , 
			D.DEPT_NAME , 
			A.BATCH_NO	,
			BT.BATCH_ID , 
			
			BX.BOX_NO , 
			BX.CLIENT_BOX_ID , 
			
			A.ARCHIVE_DATE	,
			A.ACC_ID	, 
			A.ACC_NAME	,
			A.ACC_DETAILS	,
			A.TRN_TYPE_NO	,
			A.REQ_TYPE_NO	,
			A.TRANSMIT_NO	,
			A.LAST_TRN_DATE	,
			A.IS_OLD_DATA	,
			A.CREATE_USER_NO	,
			A.CREATE_LOGON_NO	,
			A.CREATE_TIME	,
			A.UPDATE_USER_NO	,
			A.UPDATE_LOGON_NO	,
			A.UPDATE_TIME	
		FROM SET_CLIENT_ACCOUNTS A 
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		WHERE (A.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
		AND (A.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (A.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (A.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (A.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 
		AND (A.ACC_ID = @ACC_ID OR @ACC_ID IS NULL) 
		AND (A.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (A.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (A.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (A.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL)  
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 

END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_ACCOUNTS_BULK_GET]  
@ACC_NO	bigint	= NULL , 
@CLIENT_NO	smallint 	= NULL , 	
@DEPT_NO	smallint 	= NULL , 
@CLIENT_BOX_ID	varchar(50) = NULL , 		
@BATCH_NO	int		= NULL , 
@BATCH_ID	varchar(50) = NULL , 		
@ARCHIVE_DATE	date		= NULL , 
@ACC_LIST	varchar(MAX)		= NULL , 
-- @ACC_ID	varchar(50)		= NULL , 
@TRN_TYPE_NO	tinyint	= NULL , 
@REQ_TYPE_NO	tinyint	= NULL , 
@TRANSMIT_NO	bigint 	= NULL , 
@IS_OLD_DATA	bit	= NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 

AS 
BEGIN 
	
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY A.ACC_ID ASC) AS ROWNUM ,  
			A.ACC_NO	,
			A.CLIENT_NO	,
			A.DEPT_NO , 
			D.DEPT_NAME , 
			A.BATCH_NO	,
			BT.BATCH_ID , 
			
			BX.BOX_NO , 
			BX.CLIENT_BOX_ID , 
			
			A.ARCHIVE_DATE	,
			A.ACC_ID	, 
			A.ACC_NAME	,
			A.ACC_DETAILS	,
			A.TRN_TYPE_NO	,
			A.REQ_TYPE_NO	,
			A.TRANSMIT_NO	,
			A.LAST_TRN_DATE	,
			A.IS_OLD_DATA	,
			A.CREATE_USER_NO	,
			A.CREATE_LOGON_NO	,
			A.CREATE_TIME	,
			A.UPDATE_USER_NO	,
			A.UPDATE_LOGON_NO	,
			A.UPDATE_TIME	
		FROM SET_CLIENT_ACCOUNTS A 
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		INNER JOIN Split(@ACC_LIST, ',') S ON LTRIM(RTRIM(S.items)) = A.ACC_ID 
		WHERE (A.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
		AND (A.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (A.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (BX.CLIENT_BOX_ID = @CLIENT_BOX_ID OR @CLIENT_BOX_ID IS NULL) 
		AND (A.BATCH_NO = @BATCH_NO OR @BATCH_NO IS NULL) 
		AND (BT.BATCH_ID = @BATCH_ID OR @BATCH_ID IS NULL) 
		AND (A.ARCHIVE_DATE = @ARCHIVE_DATE OR @ARCHIVE_DATE IS NULL) 
		-- AND (A.ACC_ID = @ACC_ID OR @ACC_ID IS NULL) 
		AND (A.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (A.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (A.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (A.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL)  
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 

END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GEN_USER_TYPES_GET  
@USER_TYPE_NO	smallint = NULL , 
@USER_TYPE	varchar(100) = NULL , 
@USER_TYPE_DESC	varchar(500) = NULL 
AS 
BEGIN 
	SELECT 
		USER_TYPE_NO , 
		USER_TYPE , 
		USER_TYPE_DESC 
	FROM GEN_USER_TYPES 
	WHERE (USER_TYPE_NO = @USER_TYPE_NO	OR @USER_TYPE_NO IS NULL) 
	AND (USER_TYPE = @USER_TYPE	OR @USER_TYPE IS NULL) 
	AND (USER_TYPE_DESC = @USER_TYPE_DESC	OR @USER_TYPE_DESC IS NULL) 
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GEN_TRANSMIT_REQUEST_TYPES_GET 
@REQ_TYPE_NO	tinyint	 = NULL , 
@REQ_TYPE_NAME	varchar(100) = NULL , 
@REQ_TYPE_CODE	varchar(50) = NULL 
AS 
BEGIN
	SELECT 
		R.REQ_TYPE_NO , 
		R.REQ_TYPE_NAME , 
		R.REQ_TYPE_CODE	
	FROM GEN_TRANSMIT_REQUEST_TYPES R 
	WHERE (R.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
	AND (R.REQ_TYPE_NAME = @REQ_TYPE_NAME OR @REQ_TYPE_NAME IS NULL) 
	AND (R.REQ_TYPE_CODE = @REQ_TYPE_CODE OR @REQ_TYPE_CODE IS NULL) 
	ORDER BY R.REQ_TYPE_CODE ASC ;  
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_MENUS](
	[MENU_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[MENU_TYPE_NO] [smallint] NOT NULL,
	[MENU_NAME] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MENU_TIPS] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_CHILD] [bit] NULL,
	[PARENT_MENU_NO] [smallint] NULL,
	[IS_PUBLIC] [bit] NULL,
	[SL_NO] [smallint] NULL,
	[IS_ACTIVE] [bit] NULL,
	[ACTIVE_FROM] [datetime] NULL,
	[ACTIVE_TO] [datetime] NULL,
	[DEFAULT_URL] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_GEN_MENUS] PRIMARY KEY CLUSTERED 
(
	[MENU_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_MENUS] ON [dbo].[GEN_MENUS] 
(
	[MENU_TYPE_NO] ASC,
	[MENU_NAME] ASC,
	[PARENT_MENU_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GEN_COMPANY_INFO_UPDATE
@COMP_NAME varchar(100) = NULL,
@KEY_FEATURE varchar(500) = NULL,
@ADDR varchar(500) = NULL,
@PHONE varchar(50) = NULL,
@MOBILE varchar(50) = NULL,
@FAX varchar(50) = NULL,
@EMAIL_ADDR varchar(50) = NULL,
@LAST_NEW_TRANS_ID varchar(50) = NULL,
@LAST_TRANS_IN_ID varchar(50) = NULL,
@LAST_TRANS_OUT_ID varchar(50) = NULL
AS
BEGIN
	UPDATE GEN_COMPANY_INFO
	SET COMP_NAME = @COMP_NAME,
		KEY_FEATURE = @KEY_FEATURE,
		ADDR = @ADDR,
		PHONE = @PHONE,
		MOBILE = @MOBILE,
		FAX = @FAX,
		EMAIL_ADDR = @EMAIL_ADDR,
		LAST_NEW_TRANS_ID = @LAST_NEW_TRANS_ID,
		LAST_TRANS_IN_ID = @LAST_TRANS_IN_ID,
		LAST_TRANS_OUT_ID = @LAST_TRANS_OUT_ID
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE GEN_COMPANY_INFO_GET  
AS 
BEGIN
	SELECT TOP 1 
		COMP_NO , 
		COMP_NAME , 
		KEY_FEATURE , 
		ADDR , 
		PHONE , 
		MOBILE , 
		FAX , 
		EMAIL_ADDR , 
		LAST_NEW_TRANS_ID , 
		LAST_TRANS_IN_ID , 
		LAST_TRANS_OUT_ID 			
	FROM GEN_COMPANY_INFO 
	WHERE 1 = 1 
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USERS](
	[USER_NO] [int] IDENTITY(1,1) NOT NULL,
	[USER_TYPE_NO] [smallint] NOT NULL,
	[FIRST_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MID_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LAST_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOGIN_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PASS_SALT] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LOGIN_PASSWORD] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[ACTIVE_FROM] [datetime] NULL,
	[ACTIVE_TO] [datetime] NULL,
	[IS_LOCKED] [bit] NULL,
	[LOCK_REASON] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOCK_IP_ADDR] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOCK_TIME] [datetime] NULL,
	[CLIENT_NO] [smallint] NULL,
	[CAN_VIEW_DATA] [bit] NULL,
	[CAN_VIEW_IMAGE] [bit] NULL,
	[CAN_DO_REQUEST] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SEC_USERS] PRIMARY KEY CLUSTERED 
(
	[USER_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SEC_USERS] ON [dbo].[SEC_USERS] 
(
	[LOGIN_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SEC_USERS_1] ON [dbo].[SEC_USERS] 
(
	[IS_ACTIVE] ASC,
	[IS_LOCKED] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SELECT_PRODUCT_TYPES]  
@CLIENT_NO	smallint = NULL , 
@BOX_ID	varchar(100) = NULL , 
@BATCH_ID	varchar(50) = NULL  
AS 
BEGIN 
	SELECT 
		PROD_TYPE_NO, PRODUCT_TYPE, SHORT_CODE, CREATE_USER_NO, CREATE_LOGON_NO,CREATE_TIME,UPDATE_USER_NO,UPDATE_LOGON_NO,UPDATE_TIME
	FROM SET_PRODUCT_TYPES 
	;
END ; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE GEN_TRANSMIT_TYPES_GET 
@TRN_TYPE_NO	tinyint	 = NULL , 
@TRN_TYPE_NAME	varchar(50) = NULL , 
@TRANSMIT_PREFIX	varchar(50) = NULL  
AS 
BEGIN 
	SELECT 
		T.TRN_TYPE_NO	, 
		T.TRN_TYPE_NAME	, 
		T.TRANSMIT_PREFIX	
	FROM GEN_TRANSMIT_TYPES T  
	WHERE (T.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 	
	AND (T.TRN_TYPE_NAME = @TRN_TYPE_NAME OR @TRN_TYPE_NAME IS NULL) 
	AND (T.TRANSMIT_PREFIX = @TRANSMIT_PREFIX OR @TRANSMIT_PREFIX IS NULL) 
	ORDER BY T.TRN_TYPE_NAME ASC; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RPT_CLIENT_MONTHLY_IMAGE_VIEWS](
	[COMPILE_VIEW_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[RPT_YEAR] [smallint] NOT NULL,
	[RPT_MONTH] [tinyint] NOT NULL,
	[VIEW_QTY] [int] NOT NULL,
	[COMPILE_DATE] [datetime] NOT NULL,
	[COMPILE_USER_NO] [int] NOT NULL,
	[COMPILE_LOGON_NO] [bigint] NOT NULL,
 CONSTRAINT [PK_RPT_CLIENT_MONTHLY_IMAGE_VIEWS] PRIMARY KEY CLUSTERED 
(
	[COMPILE_VIEW_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE TBL_TEST_01_SELECT 
@ID_NO		bigint	= NULL ,
@ID_NAME	varchar(50) = NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN 
	SELECT R.ID_NO, R.ID_NAME FROM 
	(
	SELECT ROW_NUMBER() OVER (
							ORDER BY T.ID_NO ASC /* WRITE ORDER BY WITH YOUR REQUIRED COLUMN AND CONDITION	*/
						) AS ROWNUM , -- THIS COLUMN NAME DOESN'T EXISTS IN THE TABLE BUT USED FOR PAGING PURPOSE  
	T.ID_NO, T.ID_NAME 
	FROM TBL_TEST_01 T 
	WHERE (T.ID_NO = @ID_NO OR @ID_NO IS NULL) 
	AND (T.ID_NAME = @ID_NAME OR @ID_NAME IS NULL)
	) R 
	WHERE R.ROWNUM >= @START_INDEX AND ROWNUM <= @END_INDEX  
	;
END 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_IMAGE_VIEWS](
	[VIEW_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[USER_NO] [int] NOT NULL,
	[CLIENT_NO] [bigint] NULL,
	[ATTACH_NO] [bigint] NOT NULL,
	[DOC_NO] [bigint] NOT NULL,
	[VIEW_DATE] [date] NOT NULL,
	[VIEW_TIME] [datetime] NOT NULL,
	[VIEW_LOGON_NO] [bigint] NOT NULL,
	[IS_COMPILED] [bit] NOT NULL,
 CONSTRAINT [PK_TRN_IMAGE_VIEWS] PRIMARY KEY CLUSTERED 
(
	[VIEW_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_ROLE_MENUS](
	[ROLE_MENU_NO] [int] IDENTITY(1,1) NOT NULL,
	[ROLE_NO] [int] NOT NULL,
	[MENU_NO] [smallint] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[ACTIVE_FROM] [datetime] NULL,
	[ACTIVE_TO] [datetime] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SEC_ROLE_MENUS] PRIMARY KEY CLUSTERED 
(
	[ROLE_MENU_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SEC_ROLE_MENUS] ON [dbo].[SEC_ROLE_MENUS] 
(
	[ROLE_NO] ASC,
	[MENU_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_IMAGE_COMPILATION_HISTORY]
@CLIENT_NO INT = NULL,
@YEAR BIGINT = NULL,
@MONTH BIGINT = NULL
AS
BEGIN	
--IF (@CLIENT_NO = 0)
--	BEGIN
--	SET @CLIENT_NO = NULL
--	END
	
SELECT  CI.CLIENT_NO, C.CLIENT_NAME, CI.RPT_YEAR, CI.RPT_MONTH, CI.VIEW_QTY, CI.COMPILE_DATE 
	FROM RPT_CLIENT_MONTHLY_IMAGE_VIEWS CI
	INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = CI.CLIENT_NO
	--WHERE LTRIM(RTRIM(CI.RPT_YEAR)) = LTRIM(RTRIM(@YEAR)) OR @YEAR IS NULL
	--AND  LTRIM(RTRIM(CI.RPT_MONTH)) = LTRIM(RTRIM(@MONTH)) OR @MONTH IS NULL
	--AND CI.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GEN_MENU_ACTIONS](
	[MENU_ACTION_NO] [int] IDENTITY(1,1) NOT NULL,
	[MENU_NO] [smallint] NOT NULL,
	[ACTION_NO] [int] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
 CONSTRAINT [PK_GEN_MENU_ACTIONS] PRIMARY KEY CLUSTERED 
(
	[MENU_ACTION_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_MENU_ACTIONS] ON [dbo].[GEN_MENU_ACTIONS] 
(
	[MENU_NO] ASC,
	[ACTION_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [SEC_USERS_UPDATE]  
@USER_NO	int, 
@USER_TYPE_NO	smallint = NULL ,
@FIRST_NAME	varchar(100) = NULL ,
@MID_NAME	varchar(100) = NULL ,
@LAST_NAME	varchar(100) = NULL ,
@LOGIN_ID	varchar(100) = NULL ,
@PASS_SALT	nvarchar(200) = NULL ,
@LOGIN_PASSWORD	nvarchar(1000) = NULL ,
@IS_ACTIVE	bit = NULL ,
@ACTIVE_FROM	datetime = NULL ,
@ACTIVE_TO	datetime = NULL ,
@IS_LOCKED	bit = NULL ,
@LOCK_REASON	varchar(100) = NULL ,
@LOCK_IP_ADDR	varchar(100) = NULL ,
@LOCK_TIME	datetime = NULL,
@CLIENT_NO	smallint = NULL ,
@CAN_VIEW_DATA	bit = NULL ,
@CAN_VIEW_IMAGE	bit = NULL ,
@CAN_DO_REQUEST	bit = NULL ,
@CREATE_USER_NO	int = NULL,
@CREATE_LOGON_NO	bigint = NULL ,
@CREATE_TIME	datetime = NULL ,
@UPDATE_USER_NO	int = NULL ,
@UPDATE_LOGON_NO	bigint = NULL ,
@UPDATE_TIME	datetime = NULL  
AS 
BEGIN 
	UPDATE SEC_USERS SET 
		
			USER_TYPE_NO=	@USER_TYPE_NO,
			FIRST_NAME=	@FIRST_NAME,
			MID_NAME=	@MID_NAME,
			LAST_NAME=	@LAST_NAME,
			LOGIN_ID=	@LOGIN_ID,
			PASS_SALT=	@PASS_SALT,
			LOGIN_PASSWORD=	@LOGIN_PASSWORD,
			IS_ACTIVE=	@IS_ACTIVE,
			ACTIVE_FROM=	@ACTIVE_FROM,
			ACTIVE_TO=	@ACTIVE_TO,
			IS_LOCKED=	@IS_LOCKED,
			LOCK_REASON=	@LOCK_REASON,
			LOCK_IP_ADDR=	@LOCK_IP_ADDR,
			LOCK_TIME=	@LOCK_TIME,
			CLIENT_NO=	@CLIENT_NO,
			CAN_VIEW_DATA=	@CAN_VIEW_DATA,
			CAN_VIEW_IMAGE=	@CAN_VIEW_IMAGE,
			CAN_DO_REQUEST=	@CAN_DO_REQUEST,
			CREATE_USER_NO=	@CREATE_USER_NO,
			CREATE_LOGON_NO=	@CREATE_LOGON_NO,
			CREATE_TIME=	@CREATE_TIME,
			UPDATE_USER_NO=	@UPDATE_USER_NO,
			UPDATE_LOGON_NO=	@UPDATE_LOGON_NO   ,	
			UPDATE_TIME = GETDATE() 
	WHERE USER_NO = @USER_NO; 
END;  
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SEC_USERS_INSERT] 
@USER_NO	int	OUTPUT , 
@USER_TYPE_NO	smallint = NULL ,
@FIRST_NAME	varchar(100) = NULL ,
@MID_NAME	varchar(100) = NULL ,
@LAST_NAME	varchar(100) = NULL ,
@LOGIN_ID	varchar(100) = NULL ,
@PASS_SALT	nvarchar(200) = NULL ,
@LOGIN_PASSWORD	nvarchar(1000) = NULL ,
@IS_ACTIVE	bit = NULL ,
@ACTIVE_FROM	datetime = NULL ,
@ACTIVE_TO	datetime = NULL ,
@IS_LOCKED	bit = NULL ,
@LOCK_REASON	varchar(100) = NULL ,
@LOCK_IP_ADDR	varchar(100) = NULL ,
@LOCK_TIME	datetime = NULL,
@CLIENT_NO	smallint = NULL ,
@CAN_VIEW_DATA	bit = NULL ,
@CAN_VIEW_IMAGE	bit = NULL ,
@CAN_DO_REQUEST	bit = NULL ,
@CREATE_USER_NO	int = NULL,
@CREATE_LOGON_NO	bigint = NULL ,
@CREATE_TIME	datetime = NULL ,
@UPDATE_USER_NO	int = NULL ,
@UPDATE_LOGON_NO	bigint = NULL ,
@UPDATE_TIME	datetime = NULL  
AS 
BEGIN 
	INSERT INTO SEC_USERS ( 
		USER_TYPE_NO ,
		FIRST_NAME	,
		MID_NAME	,
		LAST_NAME	,
		LOGIN_ID	,
		PASS_SALT	,
		LOGIN_PASSWORD	,
		IS_ACTIVE	,
		ACTIVE_FROM	,
		ACTIVE_TO	,
		IS_LOCKED	,
		LOCK_REASON	,
		LOCK_IP_ADDR	,
		LOCK_TIME	,
		CLIENT_NO	,
		CAN_VIEW_DATA	,
		CAN_VIEW_IMAGE	,
		CAN_DO_REQUEST	,
		CREATE_USER_NO	,
		CREATE_LOGON_NO	,
		CREATE_TIME	,
		UPDATE_USER_NO	,
		UPDATE_LOGON_NO	,
		UPDATE_TIME	

	) 
	VALUES ( 
		@USER_TYPE_NO ,
		@FIRST_NAME	,
		@MID_NAME	,
		@LAST_NAME	,
		@LOGIN_ID	,
		@PASS_SALT	,
		@LOGIN_PASSWORD	,
		@IS_ACTIVE	,
		@ACTIVE_FROM	,
		@ACTIVE_TO	,
		@IS_LOCKED	,
		@LOCK_REASON	,
		@LOCK_IP_ADDR	,
		@LOCK_TIME	,
		@CLIENT_NO	,
		@CAN_VIEW_DATA	,
		@CAN_VIEW_IMAGE	,
		@CAN_DO_REQUEST	,
		@CREATE_USER_NO	,
		@CREATE_LOGON_NO	,
		@CREATE_TIME	,
		@UPDATE_USER_NO	,
		@UPDATE_LOGON_NO	,
		@UPDATE_TIME	
	);
	
	SET @USER_NO = SCOPE_IDENTITY(); 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SEC_USERS_GET]  
@USER_NO	INT	= NULL ,
@USER_TYPE_NO	SMALLINT	= NULL ,
@LOGIN_ID	varchar(100) = NULL ,
@LOGIN_PASSWORD	varchar(100) = NULL ,
@IS_ACTIVE	bit	= NULL , 
@IS_LOCKED	BIT	=	NULL , 
@CLIENT_NO	SMALLINT	=	NULL 
AS 
BEGIN 
	SELECT 
		U.USER_NO	,
		
		U.USER_TYPE_NO	,
		UT.USER_TYPE	,
		UT.USER_TYPE_DESC	, 
		
		U.FIRST_NAME	,
		U.MID_NAME	,
		U.LAST_NAME	,
		U.LOGIN_ID	,
		U.PASS_SALT	,
		U.LOGIN_PASSWORD	,
		U.IS_ACTIVE	,
		U.ACTIVE_FROM	,
		U.ACTIVE_TO	,
		U.IS_LOCKED	,
		U.LOCK_REASON	,
		U.LOCK_IP_ADDR	,
		U.LOCK_TIME	,
		
		U.CLIENT_NO	,
		C.CLIENT_NAME , 
		C.CLIENT_ALIAS , 
		U.CAN_VIEW_DATA , 
		U.CAN_VIEW_IMAGE , 
		U.CAN_DO_REQUEST , 

		U.CREATE_USER_NO	,
		U.CREATE_LOGON_NO	,
		U.CREATE_TIME	,
		U.UPDATE_USER_NO	,
		U.UPDATE_LOGON_NO	,
		U.UPDATE_TIME	
	FROM SEC_USERS U 
	INNER JOIN GEN_USER_TYPES UT ON UT.USER_TYPE_NO = U.USER_TYPE_NO 
	LEFT JOIN SET_CLIENTS C ON C.CLIENT_NO = U.CLIENT_NO 
	WHERE (U.USER_NO = @USER_NO OR @USER_NO IS NULL) 	
	AND (U.USER_TYPE_NO = @USER_TYPE_NO OR @USER_TYPE_NO IS NULL) 
	AND (U.LOGIN_ID = @LOGIN_ID OR @LOGIN_ID IS NULL) 
	AND (U.LOGIN_PASSWORD = @LOGIN_PASSWORD OR @LOGIN_PASSWORD IS NULL) 
	AND (U.IS_ACTIVE = @IS_ACTIVE OR @IS_ACTIVE IS NULL) 
	AND (U.IS_LOCKED = @IS_LOCKED OR @IS_LOCKED IS NULL) 
	AND (U.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
	;
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [SEC_USERS_DELETE]   
@USER_NO	int  
AS 
BEGIN 
	DELETE FROM  SEC_USERS 
	WHERE USER_NO = @USER_NO; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC SEC_USERS_CHANGE_PASSWORD 
@USER_NO	int	, 
@LOGIN_PASSWORD	nvarchar(1000) , 
@UPDATE_USER_NO	int	, 
@UPDATE_LOGON_NO	bigint	
AS 
BEGIN 
	UPDATE SEC_USERS SET 
	LOGIN_PASSWORD = @LOGIN_PASSWORD , 
	UPDATE_USER_NO = @UPDATE_USER_NO , 
	UPDATE_LOGON_NO = @UPDATE_LOGON_NO , 
	UPDATE_TIME = GETDATE() 
	WHERE USER_NO = @USER_NO; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER_ROLES](
	[USER_ROLE_NO] [int] IDENTITY(1,1) NOT NULL,
	[USER_NO] [int] NOT NULL,
	[ROLE_NO] [int] NOT NULL,
	[IS_ACTIVE] [bit] NULL,
	[ACTIVE_FROM] [datetime] NULL,
	[ACTIVE_TO] [datetime] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SEC_USER_ROLES] PRIMARY KEY CLUSTERED 
(
	[USER_ROLE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SEC_USER_ROLES] ON [dbo].[SEC_USER_ROLES] 
(
	[USER_NO] ASC,
	[ROLE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SET_CLIENT_DEPARTMENTS_GET 
@DEPT_NO	smallint	= NULL ,
@CLIENT_NO	smallint = NULL ,
@DEPT_NAME	varchar(100) = NULL 
AS 
BEGIN 
	SELECT 
		D.DEPT_NO , 
		
		D.CLIENT_NO , 
		C.CLIENT_NAME , 
		C.CLIENT_ALIAS , 

		D.DEPT_NAME , 
		D.DEPT_ADDR , 
		D.DEPT_CONTACT , 
		D.DEPT_EMAIL , 
		D.DELIVERY_LOCATION , 
		D.CONTACT_PERSON , 
		D.CONTACT_ADDR , 
		D.DESIGNATION , 
		D.ATTENTION , 
		D.IS_NEW_TRANSMIT , 
		D.IS_AUTO_ID , 
		D.NEXT_ID , 
		D.ID_LENGHT , 
		D.ID_PREFIX , 
		D.CREATE_USER_NO , 
		D.CREATE_LOGON_NO , 
		D.CREATE_TIME , 
		D.UPDATE_USER_NO , 
		D.UPDATE_LOGON_NO , 
		D.UPDATE_TIME

	FROM SET_CLIENT_DEPARTMENTS D 
	INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = D.CLIENT_NO 
	WHERE (D.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
	AND (D.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
	AND (D.DEPT_NAME = @DEPT_NAME OR @DEPT_NAME IS NULL) 
	ORDER BY D.CLIENT_NO ASC, D.DEPT_NAME ASC 
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_RECALL_BOXES](
	[RECALL_BOX_NO] [int] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[RECALL_BOX_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[RECALL_LOCATION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_CLIENT_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_DEPT_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_ARCH_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_FLOOR_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_CHAMBER_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_ROW_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_ROW_FACE_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_BAY_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_LEVEL_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOC_SEQ_ID] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_DESTROYED] [bit] NULL,
	[IS_SPLIT_BOX] [bit] NULL,
	[REF_RECALL_BOX_NO] [int] NULL,
	[IS_NEW_BOX] [bit] NULL,
	[IS_MERGE_BOX] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_RECALL_BOXES] PRIMARY KEY CLUSTERED 
(
	[RECALL_BOX_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_RECALL_BOXES] ON [dbo].[SET_RECALL_BOXES] 
(
	[RECALL_BOX_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_RECALL_BOXES_1] ON [dbo].[SET_RECALL_BOXES] 
(
	[LOC_CLIENT_ID] ASC,
	[LOC_DEPT_ID] ASC,
	[LOC_ARCH_ID] ASC,
	[LOC_FLOOR_ID] ASC,
	[LOC_CHAMBER_ID] ASC,
	[LOC_ROW_ID] ASC,
	[LOC_ROW_FACE_ID] ASC,
	[LOC_BAY_ID] ASC,
	[LOC_LEVEL_ID] ASC,
	[LOC_SEQ_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_SET_RECALL_BOXES_2] ON [dbo].[SET_RECALL_BOXES] 
(
	[IS_DESTROYED] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENT_DEPT_RECALL_BOXES_GET_DETAILS]   
@RECALL_BOX_NO		int = NULL ,
@CLIENT_NO smallint =	NULL ,
@DEPT_NO	smallint =	NULL  

AS 
BEGIN 
		SELECT ROW_NUMBER()  OVER (ORDER BY RX.RECALL_BOX_NO ASC)AS ROWNUM ,  
			RX.RECALL_BOX_NO	, 
			RX.CLIENT_NO	,  
			C.CLIENT_NAME , 
			C.CLIENT_ALIAS , 
			
			RX.DEPT_NO	, 
			D.DEPT_NAME , 
			DB.BOX_NO,
			DB.CLIENT_BOX_ID, 
			
			RX.RECALL_BOX_ID	, 
			RX.RECALL_LOCATION ,
			D.IS_AUTO_ID,
			D.NEXT_ID,
			D.ID_PREFIX,
			RX.CREATE_USER_NO	, 
			RX.CREATE_LOGON_NO	, 
			RX.CREATE_TIME	, 
			RX.UPDATE_USER_NO	,	
			RX.UPDATE_LOGON_NO	, 
			RX.UPDATE_TIME 
		FROM SET_RECALL_BOXES RX  
		LEFT JOIN SET_CLIENT_DEPT_BOXES DB ON DB.RECALL_BOX_NO = RX.RECALL_BOX_NO 
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = RX.CLIENT_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = RX.DEPT_NO  
		
		
		WHERE (RX.RECALL_BOX_NO = @RECALL_BOX_NO OR @RECALL_BOX_NO IS NULL) 
		AND (RX.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (RX.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
END; 


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_ACCOUNT_STATUS_CHECK_MANUAL_BY_TRN_TYPE_NO]
@CLIENT_NO INT = NULL,
--@REQ_TYPE_NO INT = NULL,
@TRN_TYPE_NO INT = NULL,
@ACC_ID_LIST VARCHAR(MAX) = NULL
AS
BEGIN
	IF(@TRN_TYPE_NO = 0)
	BEGIN
	   SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.CREATE_TIME, a.ARCHIVE_DATE, a.UPDATE_TIME, a.TRN_TYPE_NO,b.BATCH_ID,d.CLIENT_BOX_ID,r.RECALL_BOX_ID, r.RECALL_LOCATION
			FROM split(@ACC_ID_LIST, ',') AS t 
			LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO 
			LEFT JOIN SET_CLIENT_BATCHES AS b ON b.BATCH_NO = a.BATCH_NO
			LEFT JOIN SET_CLIENT_DEPT_BOXES AS d ON d.BOX_NO = b.BOX_NO
			LEFT JOIN SET_RECALL_BOXES AS r ON r.RECALL_BOX_NO = d.RECALL_BOX_NO
			WHERE a.trn_type_no IS NULL
		
		--SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO
		--FROM split(@ACC_ID_LIST, ',') AS t 
		--LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO AND a.REQ_TYPE_NO = @REQ_TYPE_NO
		--WHERE a.trn_type_no IS NULL
	END;
	ELSE
	BEGIN
	  SELECT LTRIM(RTRIM(t.items)) AS ACC_ID,a.CREATE_TIME, a.ARCHIVE_DATE, a.UPDATE_TIME, a.TRN_TYPE_NO,b.BATCH_ID,d.CLIENT_BOX_ID,r.RECALL_BOX_ID, r.RECALL_LOCATION
			FROM split(@ACC_ID_LIST, ',') AS t 
			LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO 
			LEFT JOIN SET_CLIENT_BATCHES AS b ON b.BATCH_NO = a.BATCH_NO
			LEFT JOIN SET_CLIENT_DEPT_BOXES AS d ON d.BOX_NO = b.BOX_NO
			LEFT JOIN SET_RECALL_BOXES AS r ON r.RECALL_BOX_NO = d.RECALL_BOX_NO
			WHERE a.trn_type_no = @TRN_TYPE_NO
		
		--SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO
		--FROM split(@ACC_ID_LIST, ',') AS t 
		--LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items)) AND a.CLIENT_NO = @CLIENT_NO AND a.REQ_TYPE_NO = @REQ_TYPE_NO
		--WHERE a.trn_type_no = @TRN_TYPE_NO
	END;
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_ACCOUNT_STATUS_CHECK_BULK_BY_TRN_TYPE_NO]
@TRN_TYPE_NO INT = NULL,
@ACC_ID_LIST VARCHAR(MAX) = NULL
AS
BEGIN
	IF(@TRN_TYPE_NO = 0)
	BEGIN
	  SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO,b.BATCH_ID,d.CLIENT_BOX_ID,r.RECALL_BOX_ID, r.RECALL_LOCATION
			FROM split(@ACC_ID_LIST, ',') AS t 
			LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items))
			LEFT JOIN SET_CLIENT_BATCHES AS b ON b.BATCH_NO = a.BATCH_NO
			LEFT JOIN SET_CLIENT_DEPT_BOXES AS d ON d.BOX_NO = b.BOX_NO
			LEFT JOIN SET_RECALL_BOXES AS r ON r.RECALL_BOX_NO = d.RECALL_BOX_NO
			WHERE a.trn_type_no IS NULL
		
		--SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO
		--FROM split(@ACC_ID_LIST, ',') AS t 
		--LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items))
		--WHERE a.trn_type_no IS NULL
	END;
	ELSE
	BEGIN
	  SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO,b.BATCH_ID,d.CLIENT_BOX_ID,r.RECALL_BOX_ID, r.RECALL_LOCATION
			FROM split(@ACC_ID_LIST, ',') AS t 
			LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items))
			LEFT JOIN SET_CLIENT_BATCHES AS b ON b.BATCH_NO = a.BATCH_NO
			LEFT JOIN SET_CLIENT_DEPT_BOXES AS d ON d.BOX_NO = b.BOX_NO
			LEFT JOIN SET_RECALL_BOXES AS r ON r.RECALL_BOX_NO = d.RECALL_BOX_NO
			WHERE a.trn_type_no = @TRN_TYPE_NO
		
		--SELECT LTRIM(RTRIM(t.items)) AS ACC_ID, a.TRN_TYPE_NO
		--FROM split(@ACC_ID_LIST, ',') AS t 
		--LEFT JOIN SET_CLIENT_ACCOUNTS AS a ON a.ACC_ID = LTRIM(RTRIM(t.items))
		--WHERE a.trn_type_no = @TRN_TYPE_NO
	END;
END;

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_RECALL_BOX_NO_BY_CLIENT_BOX_ID]
@CLIENT_BOX_ID VARCHAR(50)=NULL,
@CLIENT_NO INT = NULL
AS
BEGIN
SELECT b.*, r.RECALL_BOX_ID 
	FROM SET_CLIENT_DEPT_BOXES b 
	left join SET_RECALL_BOXES r ON r.RECALL_BOX_NO = b.RECALL_BOX_NO 
	WHERE b.CLIENT_BOX_ID = @CLIENT_BOX_ID 
	AND b.CLIENT_NO = @CLIENT_NO
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_BOX_NO_BY_CLIENT_BOX_ID]
@CLIENT_BOX_ID VARCHAR(50)=NULL,
@CLIENT_NO INT =NULL,
@DEPT_NO INT =NULL
AS
BEGIN
SELECT b.*, r.RECALL_BOX_ID 
	FROM SET_CLIENT_DEPT_BOXES b 
	left join SET_RECALL_BOXES r ON r.RECALL_BOX_NO = b.RECALL_BOX_NO 
	WHERE b.CLIENT_BOX_ID = @CLIENT_BOX_ID 
	AND b.CLIENT_NO = @CLIENT_NO OR  @CLIENT_NO IS NULL
	AND b.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_REQUESTERS](
	[REQUESTER_NO] [smallint] IDENTITY(1,1) NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[REQ_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[REQ_ADDR] [varbinary](500) NULL,
	[CONTACT] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EMAIL_ADDR] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DESIGNATION] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_REQUESTERS] PRIMARY KEY CLUSTERED 
(
	[REQUESTER_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER_LOGONS](
	[LOGON_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[USER_NO] [int] NOT NULL,
	[LOGIN_TIME] [datetime] NULL,
	[LOGOUT_TIME] [datetime] NULL,
	[IS_LOGGED_IN] [bit] NULL,
	[SESS_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LOGIN_IP_ADDR] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEVICE_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[APP_NAME] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[APP_VER] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SERVER_IP] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_SEC_USER_LOGONS] PRIMARY KEY CLUSTERED 
(
	[LOGON_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SET_CLIENT_RPT_CLIENT_MONTHLY_IMAGE_VIEWS_GET_DETAILS] 
AS 
BEGIN 
	   SELECT
			COMPILE_VIEW_NO	,	
			CLIENT_NO	,	
			RPT_YEAR , 
			RPT_MONTH	,	
			VIEW_QTY	,	
			COMPILE_DATE	, 
			COMPILE_USER_NO	,	
			COMPILE_LOGON_NO	
		FROM RPT_CLIENT_MONTHLY_IMAGE_VIEWS
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENT_RPT_CLIENT_MONTHLY_IMAGE_VIEW_COMPILE_INSERT] 
@CLIENT_NO BIGINT = NULL,
@RPT_YEAR BIGINT = NULL,
@RPT_MONTH BIGINT = NULL,
@QTY BIGINT = NULL,
@COMPILE_USER_NO BIGINT = NULL,
@COMPILE_LOGON_NO BIGINT = NULL
AS
DECLARE @QUTY INT = NULL; 
BEGIN 
	 SET @QUTY = (Select VIEW_QTY 
				FROM  RPT_CLIENT_MONTHLY_IMAGE_VIEWS 
				WHERE CLIENT_NO = @CLIENT_NO 
					AND LTRIM(RTRIM(RPT_YEAR)) = LTRIM(RTRIM(@RPT_YEAR))
					AND LTRIM(RTRIM(RPT_MONTH)) = LTRIM(RTRIM(@RPT_MONTH)))
			
	IF(@QUTY > 0)
	BEGIN
		DELETE FROM RPT_CLIENT_MONTHLY_IMAGE_VIEWS 
				WHERE CLIENT_NO = @CLIENT_NO 
					AND LTRIM(RTRIM(RPT_YEAR)) = LTRIM(RTRIM(@RPT_YEAR))
					AND LTRIM(RTRIM(RPT_MONTH)) = LTRIM(RTRIM(@RPT_MONTH)) 
	END
	--ELSE
	--BEGIN

			INSERT INTO RPT_CLIENT_MONTHLY_IMAGE_VIEWS
				(	
					CLIENT_NO	,	
					RPT_YEAR , 
					RPT_MONTH	,	
					VIEW_QTY	,	
					COMPILE_DATE	, 
					COMPILE_USER_NO	,	
					COMPILE_LOGON_NO	
				)
				VALUES
				(
					@CLIENT_NO	,	
					@RPT_YEAR , 
					@RPT_MONTH	,	
					@QTY	,	
					GETDATE()	, 
					@COMPILE_USER_NO	,	
					@COMPILE_LOGON_NO
				)
	--END
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CHALLANS](
	[CHALLAN_NO] [int] IDENTITY(1,1) NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[CHALLAN_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[REC_DATE] [date] NOT NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NULL,
	[TRANSMIT_NO] [bigint] NULL,
	[LAST_TRN_DATE] [date] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[UPLOAD_FILE_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_EXT] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_TRN_CHALLANS] PRIMARY KEY CLUSTERED 
(
	[CHALLAN_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CHALLANS] ON [dbo].[TRN_CHALLANS] 
(
	[CLIENT_NO] ASC,
	[CHALLAN_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_TRN_CHALLANS_1] ON [dbo].[TRN_CHALLANS] 
(
	[TRN_TYPE_NO] ASC,
	[REQ_TYPE_NO] ASC,
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CHALLAN_BULK_INSERT]
@CLIENT_NO smallint = NULL,
@DEPT_NO smallint = NULL,
@DOC_TYPE varchar(100)= NULL,
@ACC_ID varchar(100) = NULL,
@BATCH_ID varchar(10) = NULL,
@CLIENT_BOX_ID varchar(50) = NULL,
@RECALL_BOX_ID varchar(50) = NULL,
@ACC_NAME varchar(100) = NULL,
@TRN_TYPE_NAME varchar(50) = NULL,
@CHALLAN_ID varchar(100) = NULL,
@REC_DATE DATETIME = NULL,
@CHALLAN_DATE DATETIME = NULL,
@CREATE_USER_NO	int	 = NULL , 
@CREATE_LOGON_NO	bigint	 = NULL  
AS

DECLARE @prod_type_no tinyint;
DECLARE @trn_type_no tinyint;
DECLARE @challan_no INT;
DECLARE @box_no INT;
DECLARE @batch_no INT;
DECLARE @RECALL_BOX_NO	int; 
DECLARE @acc_no bigint; 

BEGIN
		SET @prod_type_no = (select top 1 prod_type_no from SET_PRODUCT_TYPES);
		
		IF (ltrim(rtrim(@TRN_TYPE_NAME)) = 'IN') 
			SET @trn_type_no = 1; 
		ELSE 
			SET @trn_type_no = 2; 
		
		--	SET @trn_type_no = (select TRN_TYPE_NO from GEN_TRANSMIT_TYPES where ltrim(rtrim(TRN_TYPE_NAME)) = ltrim(rtrim(@TRN_TYPE_NAME))); 


SET @challan_no = (select CHALLAN_NO from TRN_CHALLANS where CHALLAN_ID = ltrim(rtrim(@CHALLAN_ID))
	AND CLIENT_NO = @CLIENT_NO AND DEPT_NO = @DEPT_NO); 

IF (@CHALLAN_ID IS NOT NULL) 
	BEGIN		
		IF ISNULL(@challan_no, 0) = 0 			
		BEGIN
			INSERT INTO TRN_CHALLANS
				(
					CLIENT_NO, DEPT_NO, CHALLAN_ID, REC_DATE, TRN_TYPE_NO, CREATE_USER_NO, CREATE_LOGON_NO
				)
			VALUES
				(
					@CLIENT_NO, @DEPT_NO, LTRIM(RTRIM(@CHALLAN_ID)), @CHALLAN_DATE, @trn_type_no,@CREATE_USER_NO, @CREATE_LOGON_NO
				)
			SET @challan_no = SCOPE_IDENTITY(); 				
		END
	END
			

SET @RECALL_BOX_NO = (select RECALL_BOX_NO from SET_RECALL_BOXES where RECALL_BOX_ID = ltrim(rtrim(@RECALL_BOX_ID))); 
			
IF (@RECALL_BOX_ID IS NOT NULL)
	BEGIN
		IF ISNULL(@RECALL_BOX_NO, 0) = 0 
		BEGIN
			INSERT INTO SET_RECALL_BOXES
			(
				CLIENT_NO, DEPT_NO,	RECALL_BOX_ID, CREATE_USER_NO, CREATE_LOGON_NO		
			)
			VALUES
			(
				@CLIENT_NO, @DEPT_NO, LTRIM(RTRIM(@RECALL_BOX_ID)),@CREATE_USER_NO, @CREATE_LOGON_NO
			)
			SET @RECALL_BOX_NO = SCOPE_IDENTITY();
		END
	END				
						

SET @box_no = (select BOX_NO from SET_CLIENT_DEPT_BOXES where CLIENT_BOX_ID = ltrim(rtrim(@CLIENT_BOX_ID))); 
							
IF ((@REC_DATE IS NOT NULL) AND (@CLIENT_BOX_ID IS NOT NULL))
	BEGIN		
		IF ISNULL(@box_no, 0) = 0  
		BEGIN	
			INSERT INTO SET_CLIENT_DEPT_BOXES
			(
				CLIENT_NO,DEPT_NO, PROD_TYPE_NO, ARCHIVE_DATE, CLIENT_BOX_ID, CHALLAN_NO, TRN_TYPE_NO, CREATE_USER_NO, CREATE_LOGON_NO	
			)
			VALUES
			(
				@CLIENT_NO, @DEPT_NO, @prod_type_no, @REC_DATE, ltrim(rtrim(@CLIENT_BOX_ID)), @challan_no, @trn_type_no,@CREATE_USER_NO, @CREATE_LOGON_NO
			)
			SET @box_no = SCOPE_IDENTITY(); 
			
		END
		ELSE
		BEGIN
			UPDATE SET_CLIENT_DEPT_BOXES SET 
				ARCHIVE_DATE	=	@REC_DATE , 
				TRN_TYPE_NO	=	@trn_type_no  ,
				CREATE_USER_NO = @CREATE_USER_NO,
				CREATE_LOGON_NO = @CREATE_LOGON_NO    
			WHERE box_no = @box_no; 
		END
	END				

SET @batch_no = (SELECT batch_no FROM SET_CLIENT_BATCHES WHERE BATCH_ID = LTRIM(RTRIM(@BATCH_ID)) AND CLIENT_NO = @CLIENT_NO AND BOX_NO = @box_no);
		
IF ((ISNULL(@box_no, 0) > 0) AND (@REC_DATE IS NOT NULL) AND (@BATCH_ID IS NOT NULL))
	BEGIN		
		-- IF NOT EXISTS(SELECT BATCH_ID FROM SET_CLIENT_BATCHES WHERE LTRIM(RTRIM(BATCH_ID)) = LTRIM(RTRIM(@BATCH_ID)) AND CLIENT_NO = @CLIENT_NO)
		IF ISNULL(@batch_no, 0) = 0 
		BEGIN
			INSERT INTO SET_CLIENT_BATCHES
			(
				CLIENT_NO, BOX_NO, ARCHIVE_DATE, BATCH_ID, TRN_TYPE_NO, CREATE_USER_NO, CREATE_LOGON_NO	
			)
			VALUES
			(
				@CLIENT_NO, @box_no, @REC_DATE, LTRIM(RTRIM(@BATCH_ID)), @trn_type_no,@CREATE_USER_NO, @CREATE_LOGON_NO
			)
			SET @batch_no = SCOPE_IDENTITY(); 
		END
		ELSE
		BEGIN
			UPDATE SET_CLIENT_BATCHES SET 
				ARCHIVE_DATE	=	@REC_DATE ,  
				TRN_TYPE_NO	=	@trn_type_no ,
				CREATE_USER_NO = @CREATE_USER_NO,
				CREATE_LOGON_NO = @CREATE_LOGON_NO    
			WHERE batch_no = @batch_no; 
		END
	END

SET @acc_no = (SELECT acc_no FROM SET_CLIENT_ACCOUNTS WHERE ACC_ID = LTRIM(RTRIM(@ACC_ID)) 
				AND CLIENT_NO = @CLIENT_NO)
	
IF ((ISNULL(@batch_no, 0) > 0) AND (ISNULL(@trn_type_no, 0) > 0) AND (@REC_DATE IS NOT NULL) 
	AND (@ACC_ID IS NOT NULL))
	BEGIN		
		IF ISNULL(@acc_no, 0) = 0  
		BEGIN
			INSERT INTO SET_CLIENT_ACCOUNTS
			(
				CLIENT_NO, DEPT_NO, BATCH_NO, ARCHIVE_DATE, ACC_ID, ACC_NAME, TRN_TYPE_NO, CREATE_USER_NO, CREATE_LOGON_NO	
			)
			VALUES
			(
				@CLIENT_NO, @DEPT_NO, @batch_no, @REC_DATE, @ACC_ID, @ACC_NAME, @trn_type_no,@CREATE_USER_NO, @CREATE_LOGON_NO
			)
			SET @acc_no = SCOPE_IDENTITY(); 
		END
		ELSE
		BEGIN
			UPDATE SET_CLIENT_ACCOUNTS SET 
				BATCH_NO = @batch_no,
				ARCHIVE_DATE	=	@REC_DATE , 
				ACC_NAME =  @ACC_NAME,
				TRN_TYPE_NO	=	@trn_type_no ,
				CREATE_USER_NO = @CREATE_USER_NO,
				CREATE_LOGON_NO = @CREATE_LOGON_NO    
			WHERE acc_no = @acc_no; 
		END
	END					
END;

													

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_CHALLAN_DETAILS](
	[CHAL_DET_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[CHALLAN_NO] [int] NOT NULL,
	[CLIENT_BOX_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BATCH_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ACC_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IS_DATA_ENTRY] [bit] NULL,
	[REMARKS] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_TRN_CHALLAN_DETAILS] PRIMARY KEY CLUSTERED 
(
	[CHAL_DET_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_CHALLAN_DETAILS] ON [dbo].[TRN_CHALLAN_DETAILS] 
(
	[CLIENT_BOX_ID] ASC,
	[BATCH_ID] ASC,
	[ACC_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_IMAGE_DETAILS_INSERT] 
@USER_NO	bigint	=NULL ,  
@CLIENT_NO bigint = NULL,
@ATTACH_NO	bigint	=NULL , 
@DOC_NO		bigint	= NULL , 
@VIEW_LOGON_NO	bigint	= NULL
AS 
BEGIN 
	INSERT INTO TRN_IMAGE_VIEWS( 
		USER_NO	,
		CLIENT_NO,
		ATTACH_NO	,
		DOC_NO	,	
		VIEW_DATE	,	
		VIEW_TIME,
		VIEW_LOGON_NO	
	) VALUES ( 
		@USER_NO	, 
		@CLIENT_NO,
		@ATTACH_NO	, 
		@DOC_NO	, 
		getdate(),
		getdate(),
		@VIEW_LOGON_NO
	); 	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SET_RECALL_BOXES_UPDATE] 
@RECALL_BOX_NO		int, 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@RECALL_BOX_ID	VARCHAR(50) =	NULL , 
@RECALL_LOCATION	VARCHAR(200) =	NULL , 
@UPDATE_USER_NO	int =	NULL , 
@UPDATE_LOGON_NO	bigint	 =	NULL 
AS 
BEGIN 
	UPDATE SET_RECALL_BOXES SET 
		CLIENT_NO	=	@CLIENT_NO , 
		DEPT_NO	 =	@DEPT_NO , 
		RECALL_BOX_ID	=	@RECALL_BOX_ID , 
		RECALL_LOCATION	=	@RECALL_LOCATION ,
		UPDATE_USER_NO	=	@UPDATE_USER_NO , 
		UPDATE_LOGON_NO =	@UPDATE_LOGON_NO ,   
		UPDATE_TIME = GETDATE() 
	WHERE RECALL_BOX_NO = @RECALL_BOX_NO; 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SET_RECALL_BOXES_INSERT] 
@RECALL_BOX_NO		int	OUTPUT , 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@RECALL_BOX_ID	VARCHAR(50) =	NULL , 
@RECALL_LOCATION	VARCHAR(200) =	NULL , 
@CREATE_USER_NO	int =	NULL , 
@CREATE_LOGON_NO	bigint	 =	NULL 
AS 
BEGIN 
	INSERT INTO SET_RECALL_BOXES(
			CLIENT_NO , 
			DEPT_NO , 
			RECALL_BOX_ID , 
			RECALL_LOCATION ,  
			CREATE_USER_NO , 
			CREATE_LOGON_NO 
		) 
	VALUES (
			@CLIENT_NO , 
			@DEPT_NO , 
			@RECALL_BOX_ID,
			@RECALL_LOCATION,
			@CREATE_USER_NO , 
			@CREATE_LOGON_NO 	
		); 
	
	SET @RECALL_BOX_NO = SCOPE_IDENTITY(); 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SET_RECALL_BOXES_GET_PAGED]   
@RBT	bigint OUTPUT , 
@RECALL_BOX_NO		int = NULL , 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@RECALL_BOX_ID	VARCHAR(50) =	NULL

AS 
BEGIN  
		SELECT @RBT = ISNULL(COUNT(RX.RECALL_BOX_NO), 0)   			
		FROM SET_RECALL_BOXES RX  	
		WHERE (RX.RECALL_BOX_NO = @RECALL_BOX_NO OR @RECALL_BOX_NO IS NULL) 
		AND (RX.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (RX.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (RX.RECALL_BOX_ID = @RECALL_BOX_ID OR @RECALL_BOX_ID IS NULL)
		;
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SET_RECALL_BOXES_GET]  
@RECALL_BOX_NO		int = NULL , 
@CLIENT_NO	smallint =	NULL , 
@DEPT_NO	smallint =	NULL , 
@RECALL_BOX_ID	VARCHAR(50) =	NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN  
	SELECT R.* FROM ( 
		SELECT ROW_NUMBER()  OVER (ORDER BY RX.RECALL_BOX_ID ASC)AS ROWNUM ,  
			RX.RECALL_BOX_NO	, 
			RX.CLIENT_NO	,  
			C.CLIENT_NAME , 
			C.CLIENT_ALIAS , 
			
			RX.DEPT_NO	, 
			D.DEPT_NAME , 

			RX.RECALL_BOX_ID	, 
			RX.RECALL_LOCATION ,
			RX.CREATE_USER_NO	, 
			RX.CREATE_LOGON_NO	, 
			RX.CREATE_TIME	, 
			RX.UPDATE_USER_NO	,	
			RX.UPDATE_LOGON_NO	, 
			RX.UPDATE_TIME 
		FROM SET_RECALL_BOXES RX  
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = RX.CLIENT_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = RX.DEPT_NO 
		
		WHERE (RX.RECALL_BOX_NO = @RECALL_BOX_NO OR @RECALL_BOX_NO IS NULL) 
		AND (RX.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (RX.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (RX.RECALL_BOX_ID = @RECALL_BOX_ID OR @RECALL_BOX_ID IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	;
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SET_RECALL_BOXES_DELETE]  
@RECALL_BOX_NO	int	 
AS 
BEGIN
	DELETE FROM SET_RECALL_BOXES 
	WHERE RECALL_BOX_NO = @RECALL_BOX_NO;  
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[SET_BULK_RECALL_BOXES_INSERT]
@CLIENT_NO int = null,
@DEPT_NAME varchar(50),
@RECALL_BOX_ID varchar(50)=null,
@RECALL_LOCATION varchar(200)=null
as
declare @dept_no int ; 
begin
set @dept_no = (select dept_no from SET_CLIENT_DEPARTMENTS where ((ltrim(rtrim(DEPT_NAME)) = ltrim(rtrim(@DEPT_NAME))) AND CLIENT_NO = @CLIENT_NO)); 

	IF NOT EXISTS(SELECT RECALL_BOX_ID FROM SET_RECALL_BOXES WHERE RECALL_BOX_ID = @RECALL_BOX_ID AND CLIENT_NO = @CLIENT_NO AND DEPT_NO = @dept_no)
	BEGIN
		IF ISNULL(@dept_no, 0) > 0 
		BEGIN  

		INSERT INTO SET_RECALL_BOXES
					( 
						CLIENT_NO,
						DEPT_NO,
						RECALL_BOX_ID,
						RECALL_LOCATION
					)				 
					Values
					(
						@CLIENT_NO ,
						@dept_no,
						@RECALL_BOX_ID ,
						@RECALL_LOCATION 
					);
		END;
	END;
END; 

-- SET_BULK_RECALL_BOXES_INSERT 1, 'HR', 'BGL075', '01/01/01/01/F/1/01/03'
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SET_BOX_MERGES](
	[MERGE_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[RECALL_BOX_NO] [int] NOT NULL,
	[CHILD_RECALL_BOX_NO] [int] NOT NULL,
	[MERGE_DATE] [date] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_SET_BOX_MERGES] PRIMARY KEY CLUSTERED 
(
	[MERGE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_SET_BOX_MERGES] ON [dbo].[SET_BOX_MERGES] 
(
	[RECALL_BOX_NO] ASC,
	[CHILD_RECALL_BOX_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SEC_USER_LOGOUT]    
@LOGON_NO	bigint 
AS 
BEGIN 
	UPDATE SEC_USER_LOGONS SET LOGOUT_TIME = GETDATE(), IS_LOGGED_IN = 0 
	WHERE LOGON_NO = @LOGON_NO;
	
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SEC_USER_LOGONS_INSERT]   
@LOGON_NO	bigint	OUTPUT ,
@USER_NO	int	= NULL ,
@SESS_ID	varchar(100) 	= NULL ,
@LOGIN_IP_ADDR	varchar(100) 	= NULL ,
@DEVICE_ID	varchar(500) 	= NULL ,
@APP_NAME	varchar(500) 	= NULL ,
@APP_VER	varchar(100) 	= NULL ,
@SERVER_IP	varchar(100) 	= NULL 
AS 
BEGIN 
	INSERT INTO SEC_USER_LOGONS (
		USER_NO	,
		SESS_ID	,
		LOGIN_IP_ADDR	,
		DEVICE_ID	,
		[APP_NAME]	,
		APP_VER	,
		SERVER_IP		
	) 
	VALUES ( 
		@USER_NO	,
		@SESS_ID	,
		@LOGIN_IP_ADDR	,
		@DEVICE_ID	,
		@APP_NAME	,
		@APP_VER	,
		@SERVER_IP	
	);
	
	SELECT @LOGON_NO = SCOPE_IDENTITY();
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC CHECK_FOR_QTY_IN_TRN_IMAGE_VIEW 
@CLIENT_NO BIGINT = NULL,
@RPT_YEAR BIGINT = NULL,
@RPT_MONTH BIGINT = NULL
AS
BEGIN
	IF (@CLIENT_NO = 0)
	BEGIN
	SET @CLIENT_NO = NULL
	END
	 Select  CLIENT_NO, count(VIEW_NO) as QUANTITY
			FROM      TRN_IMAGE_VIEWS 
			WHERE    LTRIM(RTRIM(year(VIEW_DATE))) = LTRIM(RTRIM(@RPT_YEAR)) 
						AND (CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL)
						AND LTRIM(RTRIM(month(VIEW_DATE))) = LTRIM(RTRIM(@RPT_MONTH))
			GROUP BY year(VIEW_DATE), month(VIEW_DATE), CLIENT_NO
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE TRN_CHALLANS_UPDATE
@CHALLAN_NO	int  , 
@CLIENT_NO	smallint = NULL , 
@DEPT_NO	smallint	 = NULL , 
@CHALLAN_ID	varchar(100) = NULL , 
@REC_DATE	date = NULL , 
@TRN_TYPE_NO	tinyint	 = NULL , 
@REQ_TYPE_NO	tinyint	 = NULL , 
@TRANSMIT_NO	bigint	 = NULL , 
@LAST_TRN_DATE	date	 = NULL , 
@IS_OLD_DATA	bit	 = NULL , 
@UPDATE_USER_NO	int	 = NULL , 
@UPDATE_LOGON_NO	bigint	 = NULL  	
AS 
BEGIN 
	UPDATE TRN_CHALLANS SET 
		CLIENT_NO	 = @CLIENT_NO , 
		DEPT_NO	 = @DEPT_NO , 
		CHALLAN_ID	= @CHALLAN_ID , 
		REC_DATE	= @REC_DATE ,  
		TRN_TYPE_NO	= @TRN_TYPE_NO , 
		REQ_TYPE_NO	= @REQ_TYPE_NO , 
		TRANSMIT_NO	= @TRANSMIT_NO , 
		LAST_TRN_DATE	= @LAST_TRN_DATE , 
		IS_OLD_DATA	= @IS_OLD_DATA , 
		UPDATE_USER_NO	= @UPDATE_USER_NO , 
		UPDATE_LOGON_NO = @UPDATE_LOGON_NO ,   	
		UPDATE_TIME = GETDATE() 
	WHERE CHALLAN_NO = @CHALLAN_NO; 
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[TRN_CHALLANS_INSERT] 

@CHALLAN_NO	int	OUTPUT ,
@CLIENT_NO	smallint = NULL	,
@DEPT_NO	smallint = NULL	,
@CHALLAN_ID	varchar(100)	 = NULL ,
@REC_DATE	date = NULL ,
@TRN_TYPE_NO	tinyint = NULL 	,
@REQ_TYPE_NO	tinyint = NULL 	,
@TRANSMIT_NO	bigint = NULL 	,
@LAST_TRN_DATE	date = NULL 	,
@IS_OLD_DATA	bit	 = NULL ,
--@UPLOAD_FILE_NAME	varchar(100) = NULL	,
--@FILE_EXT	varchar(50) = NULL , 
@CREATE_USER_NO	int	 = NULL ,
@CREATE_LOGON_NO	bigint	 = NULL 

AS 
BEGIN 
	INSERT TRN_CHALLANS ( 
		CLIENT_NO	,
		DEPT_NO	,
		CHALLAN_ID	,
		REC_DATE	,
		TRN_TYPE_NO	,
		REQ_TYPE_NO	,
		TRANSMIT_NO	,
		LAST_TRN_DATE ,
		IS_OLD_DATA	,
		--UPLOAD_FILE_NAME ,
		--FILE_EXT , 
		CREATE_USER_NO	,
		CREATE_LOGON_NO 
	) 
	VALUES (
		@CLIENT_NO	,
		@DEPT_NO	,
		@CHALLAN_ID	,
		@REC_DATE	,
		@TRN_TYPE_NO	,
		@REQ_TYPE_NO	,
		@TRANSMIT_NO	,
		GETDATE()	,
		@IS_OLD_DATA	,
		--@UPLOAD_FILE_NAME	,
		--@FILE_EXT , 
		@CREATE_USER_NO	,
		@CREATE_LOGON_NO 		
	);
	
	SET @CHALLAN_NO = SCOPE_IDENTITY(); 
	
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE TRN_CHALLANS_GET_PAGED  
@CNT	bigint OUTPUT , 
@CHALLAN_NO	int = NULL , 
@CLIENT_NO	smallint = NULL , 
@DEPT_NO	smallint = NULL , 
@CHALLAN_ID	varchar(100) = NULL , 
@TRN_TYPE_NO	tinyint = NULL , 
@REQ_TYPE_NO	tinyint = NULL , 
@TRANSMIT_NO	bigint = NULL , 
@IS_OLD_DATA	bit = NULL 
AS 
BEGIN 

		SELECT @CNT = ISNULL(COUNT(CH.CHALLAN_NO), 0) 			
		FROM TRN_CHALLANS CH 		
		WHERE (CH.CHALLAN_NO = @CHALLAN_NO OR @CHALLAN_NO IS NULL) 
		AND (CH.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (CH.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (CH.CHALLAN_ID = @CHALLAN_ID OR @CHALLAN_ID IS NULL) 
		AND (CH.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (CH.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (CH.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (CH.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
	; 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[TRN_CHALLANS_GET] 
@CHALLAN_NO	int = NULL , 
@CLIENT_NO	smallint = NULL , 
@DEPT_NO	smallint = NULL , 
@CHALLAN_ID	varchar(100) = NULL , 
@TRN_TYPE_NO	tinyint = NULL , 
@REQ_TYPE_NO	tinyint = NULL , 
@TRANSMIT_NO	bigint = NULL , 
@IS_OLD_DATA	bit = NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 
AS 
BEGIN 
	SELECT R.* FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY CH.CHALLAN_ID ASC) AS ROWNUM ,  
			CH.CHALLAN_NO	,
			CH.CLIENT_NO	, 
			C.CLIENT_NAME , 
			C.CLIENT_ALIAS , 
			
			CH.DEPT_NO	,
			D.DEPT_NAME , 
			
			CH.CHALLAN_ID	,
			CH.REC_DATE	,
			CH.TRN_TYPE_NO	,
			CH.REQ_TYPE_NO	,
			CH.TRANSMIT_NO	,
			CH.LAST_TRN_DATE	,
			CH.IS_OLD_DATA	,
			CH.UPLOAD_FILE_NAME	,
			CH.FILE_EXT , 
			CH.CREATE_USER_NO	,
			CH.CREATE_LOGON_NO	,
			CH.CREATE_TIME	,
			CH.UPDATE_USER_NO	,
			CH.UPDATE_LOGON_NO	,
			CH.UPDATE_TIME	

		FROM TRN_CHALLANS CH 
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = CH.CLIENT_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = CH.DEPT_NO 
		WHERE (CH.CHALLAN_NO = @CHALLAN_NO OR @CHALLAN_NO IS NULL) 
		AND (CH.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (CH.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (CH.CHALLAN_ID = @CHALLAN_ID OR @CHALLAN_ID IS NULL) 
		AND (CH.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (CH.REQ_TYPE_NO = @REQ_TYPE_NO OR @REQ_TYPE_NO IS NULL) 
		AND (CH.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 
		AND (CH.IS_OLD_DATA = @IS_OLD_DATA OR @IS_OLD_DATA IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_TRANSMITTALS](
	[TRANSMIT_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[TRN_TYPE_NO] [tinyint] NOT NULL,
	[CLIENT_NO] [smallint] NOT NULL,
	[DEPT_NO] [smallint] NOT NULL,
	[TRANSMIT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TRN_DATE] [date] NOT NULL,
	[PROD_TYPE_NO] [tinyint] NOT NULL,
	[REMARKS] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[REASON_NO] [smallint] NOT NULL,
	[REQUESTER_NO] [smallint] NOT NULL,
	[IS_NEW_TRANSMIT] [bit] NULL,
	[IS_OLD_DATA] [bit] NULL,
	[CREATE_USER_NO] [int] NULL,
	[CREATE_LOGON_NO] [bigint] NULL,
	[CREATE_TIME] [datetime] NULL,
	[UPDATE_USER_NO] [int] NULL,
	[UPDATE_LOGON_NO] [bigint] NULL,
	[UPDATE_TIME] [datetime] NULL,
 CONSTRAINT [PK_TRN_TRANSMITTALS] PRIMARY KEY CLUSTERED 
(
	[TRANSMIT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_TRN_TRANSMITTALS] ON [dbo].[TRN_TRANSMITTALS] 
(
	[TRANSMIT_ID] ASC,
	[CLIENT_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO

CREATE NONCLUSTERED INDEX [IX_TRN_TRANSMITTALS_1] ON [dbo].[TRN_TRANSMITTALS] 
(
	[TRN_DATE] ASC,
	[TRN_TYPE_NO] ASC,
	[IS_NEW_TRANSMIT] ASC,
	[IS_OLD_DATA] ASC,
	[PROD_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENTACCOUNT_CLIENTACCOUNTDOCS_INSERT]
@CLIENT_NO INT = NULL,
@DEPT_NAME VARCHAR(50) = NULL,
@ARCHIVING_DATE DATETIME = NULL,
@ACC_ID VARCHAR(50) = NULL,
@ACC_NAME VARCHAR(50) = NULL,
@ACC_DETAILS VARCHAR(500) = NULL,
@CLIENT_BOX_ID VARCHAR(50) = NULL,
@BATCH_ID VARCHAR(50) = NULL,
@TRN_TYPE VARCHAR(50) = NULL,
@TRANSMIT_ID VARCHAR(100) = NULL,
@DOC_TYPE VARCHAR(50) = NULL,
@CREATE_USER_NO INT = NULL,
@CREATE_LOGON_NO bigint = NULL


AS
DECLARE @ACC_NO INT;
DECLARE @dept_no INT;
DECLARE @box_no INT;
DECLARE @batch_no INT;
DECLARE @trn_type_no INT;
DECLARE @transmit_no INT;
DECLARE @doc_type_no INT;
BEGIN

		IF (@TRN_TYPE = 'IN')
			BEGIN
				SET @trn_type_no = 1;
			END;
		ELSE IF (@TRN_TYPE = 'OUT')
			BEGIN
				SET @trn_type_no = 2;
			END;

SET @dept_no = (select DEPT_NO from SET_CLIENT_DEPARTMENTS where ((ltrim(rtrim(DEPT_NAME)) = ltrim(rtrim(@DEPT_NAME))) AND CLIENT_NO = @CLIENT_NO)); 
SET @box_no = (Select BOX_NO from SET_CLIENT_DEPT_BOXES where LTRIM(RTRIM(CLIENT_BOX_ID)) = LTRIM(RTRIM(@CLIENT_BOX_ID)) and CLIENT_NO = @CLIENT_NO);
SET @batch_no = (Select BATCH_NO from SET_CLIENT_BATCHES where LTRIM(RTRIM(BATCH_ID)) = LTRIM(RTRIM(@BATCH_ID)) and BOX_NO = @box_no);
SET @transmit_no = (Select TRANSMIT_NO from TRN_TRANSMITTALS where LTRIM(RTRIM(TRANSMIT_ID)) = LTRIM(RTRIM(@TRANSMIT_ID)));
SET @doc_type_no = (Select DOC_TYPE_NO from SET_DOCS_TYPES where LTRIM(RTRIM(DOC_TYPE)) = LTRIM(RTRIM(@DOC_TYPE)));

			IF NOT EXISTS(SELECT ACC_NO FROM SET_CLIENT_ACCOUNTS WHERE ACC_ID = @ACC_ID AND CLIENT_NO = @CLIENT_NO)
			 BEGIN

					IF ((ISNULL(@dept_no, 0) > 0) AND (ISNULL(@CLIENT_NO, 0) > 0)
					AND (ISNULL(@batch_no, 0) > 0) AND (ISNULL(@trn_type_no, 0) > 0) 
					AND (@ARCHIVING_DATE IS NOT NULL))
						BEGIN		
							INSERT INTO SET_CLIENT_ACCOUNTS
							(
								CLIENT_NO,
								DEPT_NO,			
								ARCHIVE_DATE,
								ACC_ID,
								ACC_NAME,
								ACC_DETAILS,
								TRN_TYPE_NO,
								BATCH_NO,
								TRANSMIT_NO,
								CREATE_USER_NO,
								CREATE_LOGON_NO
							)
						VALUES
							(
								@CLIENT_NO,
								@dept_no,
								@ARCHIVING_DATE,
								@ACC_ID,
								@ACC_NAME,
								@ACC_DETAILS,
								@trn_type_no,
								@batch_no,
								@transmit_no,
								@CREATE_USER_NO,
								@CREATE_LOGON_NO
							)
							
						SET @ACC_NO = SCOPE_IDENTITY();
						
						INSERT INTO SET_CLIENT_ACC_DOCS
									(
										ACC_NO,
										DOC_TYPE_NO,			
										ARCHIVE_DATE,
										DOC_DETAILS,
										TRN_TYPE_NO,
										TRANSMIT_NO,
										CREATE_USER_NO,
										CREATE_LOGON_NO
									)
									VALUES
									(
										@ACC_NO,
										@doc_type_no,
										@ARCHIVING_DATE,
										@ACC_DETAILS,
										@trn_type_no,
										@transmit_no,
										@CREATE_USER_NO,
										@CREATE_LOGON_NO
									)		
							END;
			 END;
			 ELSE
			 BEGIN
				SET @ACC_NO = (SELECT ACC_NO FROM SET_CLIENT_ACCOUNTS WHERE LTRIM(RTRIM(ACC_ID)) = LTRIM(RTRIM(@ACC_ID)) AND CLIENT_NO = @CLIENT_NO);
				
				INSERT INTO SET_CLIENT_ACC_DOCS
									(
										ACC_NO,
										DOC_TYPE_NO,			
										ARCHIVE_DATE,
										DOC_DETAILS,
										TRN_TYPE_NO,
										TRANSMIT_NO,
										CREATE_USER_NO,
										CREATE_LOGON_NO
									)
									VALUES
									(
										@ACC_NO,
										@doc_type_no,
										@ARCHIVING_DATE,
										@ACC_DETAILS,
										@trn_type_no,
										@transmit_no,
										@CREATE_USER_NO,
										@CREATE_LOGON_NO
									)	
			 END
END;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SET_CLIENT_BOXES_BULK_INSERT]
@CLIENT_NO int = null,
@DEPT_NAME varchar(50),
@PRODUCT_TYPE varchar(50)=null,
@ARCHIVE_DATE DATETIME = null,
@CLIENT_BOX_ID varchar(50),
@RECALL_BOX_ID varchar(50)=null,
@TRN_TYPE varchar(200)=null,
@TRANSMIT_ID varchar(200)=null
AS
DECLARE @dept_no int ;
DECLARE @product_type_no int ; 
DECLARE @trn_type_no int ; 
DECLARE @transmit_no int ; 
DECLARE @recall_box_no int ; 
-- DECLARE @archive_date datetime; 

BEGIN
		IF (@TRN_TYPE = 'IN')
			BEGIN
				SET @trn_type_no = 1;
			END;
		ELSE IF (@TRN_TYPE = 'OUT')
			BEGIN
				SET @trn_type_no = 2;
			END;
			
		--SET @archive_date = (SELECT CONVERT(VARCHAR(8), @ARCHIVE_DATE, 3) AS [DD/MM/YY])
		SET @dept_no = (select dept_no from SET_CLIENT_DEPARTMENTS where ((ltrim(rtrim(DEPT_NAME)) = ltrim(rtrim(@DEPT_NAME))) AND CLIENT_NO = @CLIENT_NO)); 
		SET @product_type_no = (select PROD_TYPE_NO from SET_PRODUCT_TYPES where ltrim(rtrim(PRODUCT_TYPE)) = ltrim(rtrim(@PRODUCT_TYPE))); 
		SET @transmit_no = (select TRANSMIT_NO from TRN_TRANSMITTALS where ltrim(rtrim(TRANSMIT_ID)) = ltrim(rtrim(@TRANSMIT_ID)) AND CLIENT_NO = @CLIENT_NO); 
		SET @recall_box_no = (select RECALL_BOX_NO from SET_RECALL_BOXES where ltrim(rtrim(RECALL_BOX_ID)) = ltrim(rtrim(@RECALL_BOX_ID))); 


	IF NOT EXISTS(SELECT CLIENT_BOX_ID FROM SET_CLIENT_DEPT_BOXES WHERE CLIENT_BOX_ID = @CLIENT_BOX_ID AND CLIENT_NO = @CLIENT_NO AND DEPT_NO = @dept_no)
		BEGIN
			IF ((ISNULL(@dept_no, 0) > 0) AND (ISNULL(@product_type_no, 0) > 0) 
				AND (ISNULL(@transmit_no, 0) > 0) AND (ISNULL(@trn_type_no, 0) > 0) 
				AND (@ARCHIVE_DATE IS NOT NULL))
			BEGIN  
			INSERT INTO	SET_CLIENT_DEPT_BOXES
						( 
							CLIENT_NO,
							DEPT_NO,
							PROD_TYPE_NO,
							ARCHIVE_DATE,
							CLIENT_BOX_ID,
							RECALL_BOX_NO,
							TRN_TYPE_NO,
							TRANSMIT_NO
						)				 
						VALUES
						(
							@CLIENT_NO ,
							@dept_no,
							@product_type_no ,
							@ARCHIVE_DATE ,
							@CLIENT_BOX_ID,
							@recall_box_no,
							@trn_type_no,
							@transmit_no
						);
			END;
		END;
END; 

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SET_CLIENT_ACCOUNTS_GET_DETAILS]  
@ACC_NO	bigint	= NULL , 
@CLIENT_NO	smallint = NULL 
AS 
BEGIN 
		SELECT ROW_NUMBER() OVER (ORDER BY A.ACC_ID ASC) AS ROWNUM ,  
			A.ACC_NO	, 
			A.CLIENT_NO	,
			C.CLIENT_NAME, 
			A.DEPT_NO , 
			D.DEPT_NAME ,  
			
			A.BATCH_NO	, 
			BT.BATCH_ID , 
			
			BX.BOX_NO , 
			BX.CLIENT_BOX_ID ,  
			
			A.ARCHIVE_DATE	, 
			A.ACC_ID	, 
			A.ACC_NAME	, 
			A.ACC_DETAILS	, 
			
			A.TRN_TYPE_NO	, 
			TT.TRN_TYPE_NAME , 
			TT.TRANSMIT_PREFIX ,  
			
			A.REQ_TYPE_NO	, 
			RT.REQ_TYPE_NAME ,  
			RT.REQ_TYPE_CODE , 
			
			A.TRANSMIT_NO	, 
			T.TRANSMIT_ID , 
			T.TRN_DATE , 
			
			A.LAST_TRN_DATE	, 
			A.IS_OLD_DATA	, 
			A.CREATE_USER_NO	, 
			A.CREATE_LOGON_NO	, 
			A.CREATE_TIME	, 
			A.UPDATE_USER_NO	, 
			A.UPDATE_LOGON_NO	, 
			A.UPDATE_TIME	
		FROM SET_CLIENT_ACCOUNTS A  
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO  
		INNER JOIN GEN_TRANSMIT_TYPES TT ON TT.TRN_TYPE_NO = A.TRN_TYPE_NO 
		LEFT JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = A.TRANSMIT_NO 
		LEFT JOIN GEN_TRANSMIT_REQUEST_TYPES RT ON RT.REQ_TYPE_NO = A.REQ_TYPE_NO 
		WHERE (A.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 		
		AND (A.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 	
	; 

END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SET_CLIENT_ACC_DOCS_GET_DETAILS]    
@DOC_NO	bigint	=	NULL	 , 
@ACC_NO	bigint	= NULL
AS 
BEGIN 
		SELECT   
			AD.DOC_NO	, 
			AD.ACC_NO	,
			A.ACC_ID,	
			A.CLIENT_NO	,
			C.CLIENT_NAME,
			A.DEPT_NO , 
			D.DEPT_NAME , 
			AD.DOC_TYPE_NO	,	
			DT.DOC_TYPE	,	
			DT.DOC_TYPE_CODE	, 
			AD.ARCHIVE_DATE	,	
			AD.DOC_DETAILS	,	
			AD.TRN_TYPE_NO	,
			TT.TRN_TYPE_NAME	,	
			AD.REQ_TYPE_NO	,	
			AD.TRANSMIT_NO	,
			T.TRANSMIT_ID,	
			BX.CLIENT_BOX_ID,
			AD.LAST_TRN_DATE	,	
			AD.IS_OLD_DATA	,	
			AD.CREATE_USER_NO	,	
			AD.CREATE_LOGON_NO	,	
			AD.CREATE_TIME	,	
			AD.UPDATE_USER_NO	,	
			AD.UPDATE_LOGON_NO	,	
			AD.UPDATE_TIME		
		FROM SET_CLIENT_ACC_DOCS AD 
		INNER JOIN SET_DOCS_TYPES DT ON DT.DOC_TYPE_NO = AD.DOC_TYPE_NO 
		INNER JOIN SET_CLIENT_ACCOUNTS A ON A.ACC_NO = AD.ACC_NO
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = A.DEPT_NO 
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO 
		INNER JOIN GEN_TRANSMIT_TYPES TT ON TT.TRN_TYPE_NO = AD.TRN_TYPE_NO 
		LEFT JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = AD.TRANSMIT_NO 
		LEFT JOIN GEN_TRANSMIT_REQUEST_TYPES RT ON RT.REQ_TYPE_NO = A.REQ_TYPE_NO 
		WHERE (AD.DOC_NO = @DOC_NO OR @DOC_NO IS NULL) 
		AND (AD.ACC_NO = @ACC_NO OR @ACC_NO IS NULL) 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_CLIENT_BOX_TRANSMIT_HISTORY]
@BOX_NO INT = NULL
AS
BEGIN
SELECT CDB.CLIENT_NO, 
	C.CLIENT_NAME, 
	CDB.BOX_NO, 
	CD.DEPT_NO,
	CD.DEPT_NAME,
	T.TRANSMIT_ID,
	CDB.CLIENT_BOX_ID, 
	CDB.ARCHIVE_DATE, 
	TR.CREATE_TIME ,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME
FROM TRN_CLIENT_DEPT_BOXES_TRANS TR
JOIN SET_CLIENT_DEPT_BOXES CDB ON CDB.BOX_NO = TR.BOX_NO
JOIN SET_CLIENTS C ON C.CLIENT_NO = TR.CLIENT_NO
JOIN SET_CLIENT_DEPARTMENTS CD ON CD.DEPT_NO = CDB.DEPT_NO
JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = TR.TRANSMIT_NO
JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = T.TRN_TYPE_NO
WHERE TR.BOX_NO = @BOX_NO
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GET_CLIENT_BOX_TRANSMIT_DETAIL_BY_TRANSMIT_ID
@TRANSMIT_ID VARCHAR(50) = NULL
AS
DECLARE @transmit_no INT = NULL;
BEGIN
	SET @transmit_no = (SELECT TRANSMIT_NO FROM TRN_TRANSMITTALS 
			WHERE LTRIM(RTRIM(TRANSMIT_ID)) = LTRIM(RTRIM(@TRANSMIT_ID)));

SELECT CDB.CLIENT_NO, 
	C.CLIENT_NAME, 
	CD.DEPT_NO,
	T.TRANSMIT_ID,
	CDB.ARCHIVE_DATE,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME, 
	CDB.BOX_NO, 
	CD.DEPT_NAME,
	CDB.CLIENT_BOX_ID, 
	CDB.CREATE_TIME 
FROM TRN_CLIENT_DEPT_BOXES_TRANS TR
JOIN SET_CLIENT_DEPT_BOXES CDB ON CDB.BOX_NO = TR.BOX_NO
JOIN SET_CLIENTS C ON C.CLIENT_NO = TR.CLIENT_NO
JOIN SET_CLIENT_DEPARTMENTS CD ON CD.DEPT_NO = CDB.DEPT_NO
JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = TR.TRANSMIT_NO
JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = CDB.TRN_TYPE_NO
WHERE TR.TRANSMIT_NO = @transmit_no
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GET_CLIENT_ACCOUNT_TRANSMIT_DETAIL_BY_TRANSMIT_ID
@TRANSMIT_ID VARCHAR(50) = NULL
AS
DECLARE @transmit_no INT = NULL;
BEGIN
	SET @transmit_no = (SELECT TRANSMIT_NO FROM TRN_TRANSMITTALS 
			WHERE LTRIM(RTRIM(TRANSMIT_ID)) = LTRIM(RTRIM(@TRANSMIT_ID)));

SELECT TR.CLIENT_NO, 
	C.CLIENT_NAME, 
	CD.DEPT_NO,
	A.ACC_NO,
	A.ACC_ID,
	T.TRANSMIT_ID,
	TR.ARCHIVE_DATE,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME, 
	CDB.BOX_NO, 
	CD.DEPT_NAME,
	CDB.CLIENT_BOX_ID, 
	TR.CREATE_TIME 
FROM TRN_CLIENT_ACCOUNTS_TRANS TR
JOIN SET_CLIENT_ACCOUNTS A ON A.ACC_NO = TR.ACC_NO
JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO
JOIN SET_CLIENT_DEPT_BOXES CDB ON CDB.BOX_NO = BT.BOX_NO
JOIN SET_CLIENTS C ON C.CLIENT_NO = TR.CLIENT_NO
JOIN SET_CLIENT_DEPARTMENTS CD ON CD.DEPT_NO = A.DEPT_NO
JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = TR.TRANSMIT_NO
JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = A.TRN_TYPE_NO
WHERE TR.TRANSMIT_NO = @transmit_no
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GET_CLIENT_ACCOUNT_DOC_TRANSMIT_DETAIL_BY_TRANSMIT_ID
@TRANSMIT_ID VARCHAR(50) = NULL
AS
DECLARE @transmit_no INT = NULL;
BEGIN
	SET @transmit_no = (SELECT TRANSMIT_NO FROM TRN_TRANSMITTALS 
			WHERE LTRIM(RTRIM(TRANSMIT_ID)) = LTRIM(RTRIM(@TRANSMIT_ID)));

SELECT A.CLIENT_NO, 
	C.CLIENT_NAME, 
	CD.DEPT_NO,
	A.ACC_NO,
	A.ACC_ID,
	DT.DOC_TYPE_NO,
	DT.DOC_TYPE,
	T.TRANSMIT_ID,
	TR.ARCHIVE_DATE,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME, 
	CDB.BOX_NO, 
	CD.DEPT_NAME,
	CDB.CLIENT_BOX_ID, 
	TR.CREATE_TIME 
FROM TRN_CLIENT_ACC_DOCS_TRANS TR
JOIN SET_CLIENT_ACC_DOCS AD ON AD.DOC_NO = TR.DOC_NO
JOIN SET_DOCS_TYPES DT ON DT.DOC_TYPE_NO = AD.DOC_TYPE_NO
JOIN SET_CLIENT_ACCOUNTS A ON A.ACC_NO = AD.ACC_NO
JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO
JOIN SET_CLIENT_DEPT_BOXES CDB ON CDB.BOX_NO = BT.BOX_NO
JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO
JOIN SET_CLIENT_DEPARTMENTS CD ON CD.DEPT_NO = A.DEPT_NO
JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = TR.TRANSMIT_NO
JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = A.TRN_TYPE_NO
WHERE TR.TRANSMIT_NO = @transmit_no
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GET_ACCOUNT_TRANSMIT_HISTORY]
@ACC_NO INT = NULL
AS
BEGIN
SELECT A.CLIENT_NO, 
	C.CLIENT_NAME, 
	D.DEPT_NAME,
	A.ACC_NO, 
	A.ACC_ID,
	A.ACC_NAME,
	BX.CLIENT_BOX_ID,
	T.TRANSMIT_ID, 
	A.ARCHIVE_DATE, 
	TR.CREATE_TIME ,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME
FROM TRN_CLIENT_ACCOUNTS_TRANS TR
		INNER JOIN SET_CLIENT_ACCOUNTS A ON A.ACC_NO = TR.ACC_NO 
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO
		INNER JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = TR.TRANSMIT_NO
		INNER JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = T.TRN_TYPE_NO
WHERE TR.ACC_NO = @ACC_NO
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC GET_ACCOUNT_DOC_TRANSMIT_HISTORY
@DOC_NO INT = NULL
AS
BEGIN
SELECT A.CLIENT_NO, 
	C.CLIENT_NAME, 
	D.DEPT_NAME,
	A.ACC_NO, 
	A.ACC_ID,
    AD.DOC_TYPE_NO,
    DT.DOC_TYPE,
	BX.CLIENT_BOX_ID,
	T.TRANSMIT_ID, 
	A.ARCHIVE_DATE, 
	A.CREATE_TIME ,
	T.TRN_TYPE_NO,
	GT.TRN_TYPE_NAME
FROM SET_CLIENT_ACC_DOCS AD 
		INNER JOIN SET_DOCS_TYPES DT ON DT.DOC_TYPE_NO = AD.DOC_TYPE_NO
		INNER JOIN SET_CLIENT_ACCOUNTS A ON A.ACC_NO = AD.ACC_NO
		INNER JOIN SET_CLIENTS C ON C.CLIENT_NO = A.CLIENT_NO
		INNER JOIN SET_CLIENT_BATCHES BT ON BT.BATCH_NO = A.BATCH_NO 
		INNER JOIN SET_CLIENT_DEPT_BOXES BX ON BX.BOX_NO = BT.BOX_NO 
		INNER JOIN SET_CLIENT_DEPARTMENTS D ON D.DEPT_NO = BX.DEPT_NO 
		INNER JOIN TRN_TRANSMITTALS T ON T.TRANSMIT_NO = AD.TRANSMIT_NO
		INNER JOIN GEN_TRANSMIT_TYPES GT ON GT.TRN_TYPE_NO = AD.TRN_TYPE_NO
WHERE AD.DOC_NO = @DOC_NO
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC TRN_TRANSMITTALS_GET_PAGED   
@TRANSMIT_NO	bigint = NULL , 
@TRN_TYPE_NO	tinyint = NULL , 
@CLIENT_NO	smallint = NULL , 
@DEPT_NO	smallint = NULL , 
@TRANSMIT_ID	varchar(50) = NULL 

AS 
BEGIN 
	SELECT ISNULL(COUNT(TM.TRANSMIT_NO), 0) AS CNT 		
	FROM TRN_TRANSMITTALS TM 
	WHERE (TM.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 	
	AND (TM.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
	AND (TM.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
	AND (TM.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
	AND (TM.TRANSMIT_ID = @TRANSMIT_ID OR @TRANSMIT_ID IS NULL) 	
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC TRN_TRANSMITTALS_GET  
@TRANSMIT_NO	bigint = NULL , 
@TRN_TYPE_NO	tinyint = NULL , 
@CLIENT_NO	smallint = NULL , 
@DEPT_NO	smallint = NULL , 
@TRANSMIT_ID	varchar(50) = NULL , 

@START_INDEX INT = NULL , 
@END_INDEX	INT	= NULL 

AS 
BEGIN 
	SELECT R.* FROM (
		SELECT 
			ROW_NUMBER() OVER (ORDER BY TM.TRANSMIT_NO ASC) AS ROWNUM ,  
			TM.TRANSMIT_NO , 
			TM.TRN_TYPE_NO , 
			TM.CLIENT_NO , 
			TM.DEPT_NO , 
			TM.TRANSMIT_ID , 
			TM.TRN_DATE , 
			TM.PROD_TYPE_NO , 
			TM.REMARKS , 
			TM.REASON_NO , 
			TM.REQUESTER_NO , 
			TM.IS_NEW_TRANSMIT , 
			TM.IS_OLD_DATA , 
			TM.CREATE_USER_NO , 
			TM.CREATE_LOGON_NO , 
			TM.CREATE_TIME , 
			TM.UPDATE_USER_NO , 
			TM.UPDATE_LOGON_NO , 
			TM.UPDATE_TIME 
		FROM TRN_TRANSMITTALS TM 
		WHERE (TM.TRANSMIT_NO = @TRANSMIT_NO OR @TRANSMIT_NO IS NULL) 	
		AND (TM.TRN_TYPE_NO = @TRN_TYPE_NO OR @TRN_TYPE_NO IS NULL) 
		AND (TM.CLIENT_NO = @CLIENT_NO OR @CLIENT_NO IS NULL) 
		AND (TM.DEPT_NO = @DEPT_NO OR @DEPT_NO IS NULL) 
		AND (TM.TRANSMIT_ID = @TRANSMIT_ID OR @TRANSMIT_ID IS NULL) 
	) R 
	WHERE (R.ROWNUM >= @START_INDEX OR @START_INDEX IS NULL) 
	AND (ROWNUM <= @END_INDEX  OR @END_INDEX IS NULL) 
	; 
END; 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TRN_TRANSMIT_REQ_TYPES](
	[TRN_REQ_TYPE_NO] [bigint] IDENTITY(1,1) NOT NULL,
	[TRANSMIT_NO] [bigint] NOT NULL,
	[REQ_TYPE_NO] [tinyint] NOT NULL,
 CONSTRAINT [PK_TRN_TRANSMIT_REQ_TYPES] PRIMARY KEY CLUSTERED 
(
	[TRN_REQ_TYPE_NO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
)

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[INSERT_TRN_CLIENT_DEPT_BOXES_TRANS]
   ON  [dbo].[SET_CLIENT_DEPT_BOXES]
   FOR INSERT, UPDATE
AS 
BEGIN 

	--	##	PLEASE ENSURE THE DATATYPE  ##		
	DECLARE @BOX_NO INT;
	-- DECLARE @TRN_TYPE_NO INT;
	DECLARE @TRANSMIT_NO	BIGINT; 
		
	DECLARE @CLIENT_NO	smallint;
	DECLARE @ARCHIVE_DATE	date;
	DECLARE @CREATE_USER_NO	int	;
	DECLARE @CREATE_LOGON_NO bigint;	
	--DECLARE @CREATE_TIME	datetime;	
	--DECLARE @IS_COMPILED	bit;	
	--DECLARE @COMPLIE_DATE	datetime;
	--DECLARE @COMPILE_USER_NO	smallint;
	--DECLARE @COMPILE_LOGON_NO	bigint;
	
	SELECT @BOX_NO = BOX_NO FROM INSERTED
	-- SELECT @TRN_TYPE_NO = TRN_TYPE_NO FROM INSERTED
	SELECT @TRANSMIT_NO = TRANSMIT_NO FROM INSERTED	--	NEW LINE ADDED 		
	SELECT @CLIENT_NO = CLIENT_NO FROM INSERTED
	SELECT @ARCHIVE_DATE = ARCHIVE_DATE FROM INSERTED
	SELECT @CREATE_USER_NO = CREATE_USER_NO FROM INSERTED
	SELECT @CREATE_LOGON_NO = CREATE_LOGON_NO FROM INSERTED
	
	IF (@TRANSMIT_NO	IS NOT NULL AND @TRANSMIT_NO > 0)  	--	NEW LINE ADDED 		
	BEGIN  	--	NEW LINE ADDED 		 
		IF EXISTS (SELECT BOX_NO	--	CHANGED FOR PERFORMANCE  
			   FROM TRN_CLIENT_DEPT_BOXES_TRANS 
			   WHERE BOX_NO = @BOX_NO 
			   -- AND TRANSMIT_NO = @TRN_TYPE_NO 
			   AND TRANSMIT_NO = @TRANSMIT_NO	--	NEW LINE ADDED   
			  )
		 BEGIN
			UPDATE TRN_CLIENT_DEPT_BOXES_TRANS 
				SET 
					BOX_NO = @BOX_NO, 
					-- TRANSMIT_NO = @TRN_TYPE_NO, 
					TRANSMIT_NO = @TRANSMIT_NO,	--	NEW LINE ADDED 				
					CLIENT_NO = @CLIENT_NO,
					ARCHIVE_DATE = @ARCHIVE_DATE,
					CREATE_USER_NO = @CREATE_USER_NO,
					CREATE_LOGON_NO = @CREATE_LOGON_NO,
					CREATE_TIME = GETDATE()
				WHERE 
				BOX_NO = @BOX_NO 
				-- AND TRANSMIT_NO = @TRN_TYPE_NO 
				AND TRANSMIT_NO = @TRANSMIT_NO 
		 END
		 ELSE
		 BEGIN
			INSERT INTO  TRN_CLIENT_DEPT_BOXES_TRANS
			(
				CLIENT_NO, 
				BOX_NO, 
				TRANSMIT_NO,
				ARCHIVE_DATE, 
				CREATE_USER_NO, 
				CREATE_LOGON_NO, 
				CREATE_TIME 
				--IS_COMPILED, 
				--COMPILE_USER_NO, 
				--COMPILE_LOGON_NO
			)
			VALUES 
			(
				@CLIENT_NO, 
				@BOX_NO, 
				-- @TRN_TYPE_NO, 
				@TRANSMIT_NO, 
				@ARCHIVE_DATE, 
				@CREATE_USER_NO, 
				@CREATE_LOGON_NO, 
				GETDATE()
				--@IS_COMPILED, 
				--@COMPILE_USER_NO, 
				--@COMPILE_LOGON_NO
			)
		 END
	END
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER INSERT_TRN_CLIENT_BATCHES_TRANS
   ON  dbo.SET_CLIENT_BATCHES
   FOR INSERT, UPDATE
AS 
BEGIN 
	
	DECLARE @BATCH_NO BIGINT;
	DECLARE @TRANSMIT_NO	BIGINT; 
		
	DECLARE @CLIENT_NO	smallint;
	DECLARE @ARCHIVE_DATE	date;
	DECLARE @CREATE_USER_NO	int	;
	DECLARE @CREATE_LOGON_NO bigint;	
	--DECLARE @CREATE_TIME	datetime;	
	--DECLARE @IS_COMPILED	bit;	
	--DECLARE @COMPLIE_DATE	datetime;
	--DECLARE @COMPILE_USER_NO	smallint;
	--DECLARE @COMPILE_LOGON_NO	bigint;
	
	SELECT @BATCH_NO = BATCH_NO FROM INSERTED
	SELECT @TRANSMIT_NO = TRANSMIT_NO FROM INSERTED		
	SELECT @CLIENT_NO = CLIENT_NO FROM INSERTED
	SELECT @ARCHIVE_DATE = ARCHIVE_DATE FROM INSERTED
	SELECT @CREATE_USER_NO = CREATE_USER_NO FROM INSERTED
	SELECT @CREATE_LOGON_NO = CREATE_LOGON_NO FROM INSERTED
	
	IF (@TRANSMIT_NO	IS NOT NULL AND @TRANSMIT_NO > 0)	
	BEGIN  		 
		IF EXISTS (SELECT BATCH_NO	 
			   FROM TRN_CLIENT_BATCHES_TRANS 
			   WHERE BATCH_NO = @BATCH_NO 
			   AND TRANSMIT_NO = @TRANSMIT_NO  
			  )
		 BEGIN
			UPDATE TRN_CLIENT_BATCHES_TRANS 
				SET 
					BATCH_NO = @BATCH_NO, 
					TRANSMIT_NO = @TRANSMIT_NO, 				
					CLIENT_NO = @CLIENT_NO,
					ARCHIVE_DATE = @ARCHIVE_DATE,
					CREATE_USER_NO = @CREATE_USER_NO,
					CREATE_LOGON_NO = @CREATE_LOGON_NO
				WHERE 
				BATCH_NO = @BATCH_NO
				AND TRANSMIT_NO = @TRANSMIT_NO 
		 END
		 ELSE
		 BEGIN
			INSERT INTO  TRN_CLIENT_BATCHES_TRANS
			(
				CLIENT_NO, 
				BATCH_NO, 
				TRANSMIT_NO,
				ARCHIVE_DATE, 
				CREATE_USER_NO, 
				CREATE_LOGON_NO, 
				CREATE_TIME 
				--IS_COMPILED, 
				--COMPILE_USER_NO, 
				--COMPILE_LOGON_NO
			)
			VALUES 
			(
				@CLIENT_NO, 
				@BATCH_NO, 
				-- @TRN_TYPE_NO, 
				@TRANSMIT_NO, 
				@ARCHIVE_DATE, 
				@CREATE_USER_NO, 
				@CREATE_LOGON_NO, 
				GETDATE()
				--@IS_COMPILED, 
				--@COMPILE_USER_NO, 
				--@COMPILE_LOGON_NO
			)
		 END
	END
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[INSERT_TRN_CLIENT_ACCOUNTS_TRANS]
   ON  [dbo].[SET_CLIENT_ACCOUNTS]
   FOR INSERT, UPDATE
AS 
BEGIN 
	
	DECLARE @ACC_NO BIGINT;
	DECLARE @TRANSMIT_NO	BIGINT; 
		
	DECLARE @CLIENT_NO	smallint;
	DECLARE @ARCHIVE_DATE	date;
	DECLARE @CREATE_USER_NO	int	;
	DECLARE @CREATE_LOGON_NO bigint;	
	--DECLARE @CREATE_TIME	datetime;	
	--DECLARE @IS_COMPILED	bit;	
	--DECLARE @COMPLIE_DATE	datetime;
	--DECLARE @COMPILE_USER_NO	smallint;
	--DECLARE @COMPILE_LOGON_NO	bigint;
	
	SELECT @ACC_NO = ACC_NO FROM INSERTED
	SELECT @TRANSMIT_NO = TRANSMIT_NO FROM INSERTED		
	SELECT @CLIENT_NO = CLIENT_NO FROM INSERTED
	SELECT @ARCHIVE_DATE = ARCHIVE_DATE FROM INSERTED
	SELECT @CREATE_USER_NO = CREATE_USER_NO FROM INSERTED
	SELECT @CREATE_LOGON_NO = CREATE_LOGON_NO FROM INSERTED
	
	IF (@TRANSMIT_NO	IS NOT NULL AND @TRANSMIT_NO > 0)	
	BEGIN  		 
		IF EXISTS (SELECT ACC_NO	 
			   FROM TRN_CLIENT_ACCOUNTS_TRANS 
			   WHERE ACC_NO = @ACC_NO 
			   AND TRANSMIT_NO = @TRANSMIT_NO  
			  )
		 BEGIN
			UPDATE TRN_CLIENT_ACCOUNTS_TRANS 
				SET 
					ACC_NO = @ACC_NO, 
					TRANSMIT_NO = @TRANSMIT_NO, 				
					CLIENT_NO = @CLIENT_NO,
					ARCHIVE_DATE = @ARCHIVE_DATE,
					CREATE_USER_NO = @CREATE_USER_NO,
					CREATE_LOGON_NO = @CREATE_LOGON_NO,
					CREATE_TIME = GETDATE()
				WHERE 
				ACC_NO = @ACC_NO 
				AND TRANSMIT_NO = @TRANSMIT_NO 
		 END
		 ELSE
		 BEGIN
			INSERT INTO  TRN_CLIENT_ACCOUNTS_TRANS
			(
				CLIENT_NO, 
				ACC_NO, 
				TRANSMIT_NO,
				ARCHIVE_DATE, 
				CREATE_USER_NO, 
				CREATE_LOGON_NO, 
				CREATE_TIME 
				--IS_COMPILED, 
				--COMPILE_USER_NO, 
				--COMPILE_LOGON_NO
			)
			VALUES 
			(
				@CLIENT_NO, 
				@ACC_NO, 
				-- @TRN_TYPE_NO, 
				@TRANSMIT_NO, 
				@ARCHIVE_DATE, 
				@CREATE_USER_NO, 
				@CREATE_LOGON_NO, 
				GETDATE()
				--@IS_COMPILED, 
				--@COMPILE_USER_NO, 
				--@COMPILE_LOGON_NO
			)
		 END
	END
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER INSERT_TRN_CLIENT_ACC_DOCS_TRANS
   ON  SET_CLIENT_ACC_DOCS
   FOR INSERT, UPDATE
AS 
BEGIN 
	
	DECLARE @DOC_NO BIGINT;
	-- DECLARE @TRN_TYPE_NO INT;
	DECLARE @TRANSMIT_NO	BIGINT; 
		
	--DECLARE @CLIENT_NO	smallint;
	DECLARE @ARCHIVE_DATE	date;
	DECLARE @CREATE_USER_NO	int	;
	DECLARE @CREATE_LOGON_NO bigint;	
	--DECLARE @CREATE_TIME	datetime;	
	--DECLARE @IS_COMPILED	bit;	
	--DECLARE @COMPLIE_DATE	datetime;
	--DECLARE @COMPILE_USER_NO	smallint;
	--DECLARE @COMPILE_LOGON_NO	bigint;
	
	SELECT @DOC_NO = DOC_NO FROM INSERTED
	SELECT @TRANSMIT_NO = TRANSMIT_NO FROM INSERTED		
	--SELECT @CLIENT_NO = CLIENT_NO FROM INSERTED
	SELECT @ARCHIVE_DATE = ARCHIVE_DATE FROM INSERTED
	SELECT @CREATE_USER_NO = CREATE_USER_NO FROM INSERTED
	SELECT @CREATE_LOGON_NO = CREATE_LOGON_NO FROM INSERTED
	
	IF (@TRANSMIT_NO	IS NOT NULL AND @TRANSMIT_NO > 0)	
	BEGIN  		 
		IF EXISTS (SELECT DOC_NO	 
			   FROM TRN_CLIENT_ACC_DOCS_TRANS 
			   WHERE DOC_NO = @DOC_NO 
			   AND TRANSMIT_NO = @TRANSMIT_NO  
			  )
		 BEGIN
			UPDATE TRN_CLIENT_ACC_DOCS_TRANS 
				SET 
					DOC_NO = @DOC_NO, 
					TRANSMIT_NO = @TRANSMIT_NO, 				
					--CLIENT_NO = @CLIENT_NO,
					ARCHIVE_DATE = @ARCHIVE_DATE,
					CREATE_USER_NO = @CREATE_USER_NO,
					CREATE_LOGON_NO = @CREATE_LOGON_NO
				WHERE 
				DOC_NO = @DOC_NO 
				AND TRANSMIT_NO = @TRANSMIT_NO 
		 END
		 ELSE
		 BEGIN
			INSERT INTO  TRN_CLIENT_ACC_DOCS_TRANS
			(
				--CLIENT_NO, 
				DOC_NO, 
				TRANSMIT_NO,
				ARCHIVE_DATE, 
				CREATE_USER_NO, 
				CREATE_LOGON_NO, 
				CREATE_TIME 
				--IS_COMPILED, 
				--COMPILE_USER_NO, 
				--COMPILE_LOGON_NO
			)
			VALUES 
			(
				--@CLIENT_NO, 
				@DOC_NO, 
				-- @TRN_TYPE_NO, 
				@TRANSMIT_NO, 
				@ARCHIVE_DATE, 
				@CREATE_USER_NO, 
				@CREATE_LOGON_NO, 
				GETDATE()
				--@IS_COMPILED, 
				--@COMPILE_USER_NO, 
				--@COMPILE_LOGON_NO
			)
		 END
	END
END
GO
ALTER TABLE [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CLIENT_DEPT_BOXES_TRANS_SET_CLIENT_DEPT_BOXES] FOREIGN KEY([BOX_NO])
REFERENCES [dbo].[SET_CLIENT_DEPT_BOXES] ([BOX_NO])
GO
ALTER TABLE [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS] CHECK CONSTRAINT [FK_TRN_CLIENT_DEPT_BOXES_TRANS_SET_CLIENT_DEPT_BOXES]
GO
ALTER TABLE [dbo].[TRN_CLIENT_DEPT_BOXES_TRANS] ADD  CONSTRAINT [DF_TRN_CLIENT_DEPT_BOXES_TRANS_IS_COMPILED]  DEFAULT ((0)) FOR [IS_COMPILED]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] CHECK CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] CHECK CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_PRODUCT_TYPES] FOREIGN KEY([PROD_TYPE_NO])
REFERENCES [dbo].[SET_PRODUCT_TYPES] ([PROD_TYPE_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] CHECK CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_PRODUCT_TYPES]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_RECALL_BOXES] FOREIGN KEY([RECALL_BOX_NO])
REFERENCES [dbo].[SET_RECALL_BOXES] ([RECALL_BOX_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] CHECK CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_SET_RECALL_BOXES]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_TRN_CHALLANS] FOREIGN KEY([CHALLAN_NO])
REFERENCES [dbo].[TRN_CHALLANS] ([CHALLAN_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] CHECK CONSTRAINT [FK_SET_CLIENT_DEPT_BOXES_TRN_CHALLANS]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] ADD  CONSTRAINT [DF_SET_CLIENT_DEPT_BOXES_IS_BLACK_BOX]  DEFAULT ((0)) FOR [IS_BLACK_BOX]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] ADD  CONSTRAINT [DF_SET_CLIENT_DEPT_BOXES_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPT_BOXES] ADD  CONSTRAINT [DF_SET_CLIENT_DEPT_BOXES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[TRN_CLIENT_BATCHES_TRANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CLIENT_BATCHES_TRANS_SET_CLIENT_BATCHES] FOREIGN KEY([BATCH_NO])
REFERENCES [dbo].[SET_CLIENT_BATCHES] ([BATCH_NO])
GO
ALTER TABLE [dbo].[TRN_CLIENT_BATCHES_TRANS] CHECK CONSTRAINT [FK_TRN_CLIENT_BATCHES_TRANS_SET_CLIENT_BATCHES]
GO
ALTER TABLE [dbo].[TRN_CLIENT_BATCHES_TRANS] ADD  CONSTRAINT [DF_TRN_CLIENT_BATCHES_TRANS_IS_COMPILED]  DEFAULT ((0)) FOR [IS_COMPILED]
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_BATCHES_SET_CLIENT_DEPT_BOXES] FOREIGN KEY([BOX_NO])
REFERENCES [dbo].[SET_CLIENT_DEPT_BOXES] ([BOX_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES] CHECK CONSTRAINT [FK_SET_CLIENT_BATCHES_SET_CLIENT_DEPT_BOXES]
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_BATCHES_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES] CHECK CONSTRAINT [FK_SET_CLIENT_BATCHES_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES] ADD  CONSTRAINT [DF_SET_CLIENT_BATCHES_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[SET_CLIENT_BATCHES] ADD  CONSTRAINT [DF_SET_CLIENT_BATCHES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_CLIENT_ATTACHS]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_ATTACHS_SET_CLIENT_ACC_DOCS] FOREIGN KEY([DOC_NO])
REFERENCES [dbo].[SET_CLIENT_ACC_DOCS] ([DOC_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_ATTACHS] CHECK CONSTRAINT [FK_SET_CLIENT_ATTACHS_SET_CLIENT_ACC_DOCS]
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACCOUNTS_TRANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CLIENT_ACCOUNTS_TRANS_SET_CLIENT_ACCOUNTS] FOREIGN KEY([ACC_NO])
REFERENCES [dbo].[SET_CLIENT_ACCOUNTS] ([ACC_NO])
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACCOUNTS_TRANS] CHECK CONSTRAINT [FK_TRN_CLIENT_ACCOUNTS_TRANS_SET_CLIENT_ACCOUNTS]
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACCOUNTS_TRANS] ADD  CONSTRAINT [DF_TRN_CLIENT_ACCOUNTS_TRANS_IS_COMPILED]  DEFAULT ((0)) FOR [IS_COMPILED]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENT_BATCHES] FOREIGN KEY([BATCH_NO])
REFERENCES [dbo].[SET_CLIENT_BATCHES] ([BATCH_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS] CHECK CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENT_BATCHES]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS] CHECK CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS] CHECK CONSTRAINT [FK_SET_CLIENT_ACCOUNTS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS] ADD  CONSTRAINT [DF_SET_CLIENT_ACCOUNTS_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACCOUNTS] ADD  CONSTRAINT [DF_SET_CLIENT_ACCOUNTS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACC_DOCS_TRANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CLIENT_ACC_DOCS_TRANS_SET_CLIENT_ACC_DOCS] FOREIGN KEY([DOC_NO])
REFERENCES [dbo].[SET_CLIENT_ACC_DOCS] ([DOC_NO])
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACC_DOCS_TRANS] CHECK CONSTRAINT [FK_TRN_CLIENT_ACC_DOCS_TRANS_SET_CLIENT_ACC_DOCS]
GO
ALTER TABLE [dbo].[TRN_CLIENT_ACC_DOCS_TRANS] ADD  CONSTRAINT [DF_TRN_CLIENT_ACC_DOCS_TRANS_IS_COMPILED]  DEFAULT ((0)) FOR [IS_COMPILED]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACC_DOCS] ADD  CONSTRAINT [DF_SET_CLIENT_ACC_DOCS_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[SET_CLIENT_ACC_DOCS] ADD  CONSTRAINT [DF_SET_CLIENT_ACC_DOCS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SEC_ROLES] ADD  CONSTRAINT [DF_SEC_ROLES_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[SEC_ROLES] ADD  CONSTRAINT [DF_SEC_ROLES_ACTIVE_FROM]  DEFAULT (getdate()) FOR [ACTIVE_FROM]
GO
ALTER TABLE [dbo].[SEC_ROLES] ADD  CONSTRAINT [DF_SEC_ROLES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[GEN_TRANSMIT_TYPES] ADD  CONSTRAINT [DF_GEN_TRANSMIT_TYPES_TRANSMIT_PREFIX]  DEFAULT ('') FOR [TRANSMIT_PREFIX]
GO
ALTER TABLE [dbo].[SET_CLIENTS] ADD  CONSTRAINT [DF_SET_CLIENTS_IS_ACIVE]  DEFAULT ((1)) FOR [IS_ACIVE]
GO
ALTER TABLE [dbo].[SET_CLIENTS] ADD  CONSTRAINT [DF_SET_CLIENTS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_PRODUCT_TYPES] ADD  CONSTRAINT [DF_SET_PRODUCT_TYPES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_REASONS]  WITH CHECK ADD  CONSTRAINT [FK_SET_REASONS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_REASONS] CHECK CONSTRAINT [FK_SET_REASONS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_REASONS] ADD  CONSTRAINT [DF_SET_REASONS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS]  WITH CHECK ADD  CONSTRAINT [FK_SET_CLIENT_DEPARTMENTS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] CHECK CONSTRAINT [FK_SET_CLIENT_DEPARTMENTS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] ADD  CONSTRAINT [DF_SET_CLIENT_DEPARTMENTS_IS_NEW_TRANSMIT]  DEFAULT ((0)) FOR [IS_NEW_TRANSMIT]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] ADD  CONSTRAINT [DF_SET_CLIENT_DEPARTMENTS_IS_AUTO_ID]  DEFAULT ((1)) FOR [IS_AUTO_ID]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] ADD  CONSTRAINT [DF_SET_CLIENT_DEPARTMENTS_NEXT_ID]  DEFAULT ((0)) FOR [NEXT_ID]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] ADD  CONSTRAINT [DF_SET_CLIENT_DEPARTMENTS_ID_PREFIX]  DEFAULT ((0)) FOR [ID_PREFIX]
GO
ALTER TABLE [dbo].[SET_CLIENT_DEPARTMENTS] ADD  CONSTRAINT [DF_SET_CLIENT_DEPARTMENTS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[GEN_MENUS]  WITH CHECK ADD  CONSTRAINT [FK_GEN_MENUS_GEN_MENU_TYPES] FOREIGN KEY([MENU_TYPE_NO])
REFERENCES [dbo].[GEN_MENU_TYPES] ([MENU_TYPE_NO])
GO
ALTER TABLE [dbo].[GEN_MENUS] CHECK CONSTRAINT [FK_GEN_MENUS_GEN_MENU_TYPES]
GO
ALTER TABLE [dbo].[GEN_MENUS]  WITH CHECK ADD  CONSTRAINT [FK_GEN_MENUS_GEN_MENUS] FOREIGN KEY([PARENT_MENU_NO])
REFERENCES [dbo].[GEN_MENUS] ([MENU_NO])
GO
ALTER TABLE [dbo].[GEN_MENUS] CHECK CONSTRAINT [FK_GEN_MENUS_GEN_MENUS]
GO
ALTER TABLE [dbo].[GEN_MENUS] ADD  CONSTRAINT [DF_GEN_MENUS_IS_CHILD]  DEFAULT ((0)) FOR [IS_CHILD]
GO
ALTER TABLE [dbo].[GEN_MENUS] ADD  CONSTRAINT [DF_GEN_MENUS_IS_PUBLIC]  DEFAULT ((0)) FOR [IS_PUBLIC]
GO
ALTER TABLE [dbo].[GEN_MENUS] ADD  CONSTRAINT [DF_GEN_MENUS_SL_NO]  DEFAULT ((0)) FOR [SL_NO]
GO
ALTER TABLE [dbo].[GEN_MENUS] ADD  CONSTRAINT [DF_GEN_MENUS_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[GEN_MENUS] ADD  CONSTRAINT [DF_GEN_MENUS_ACTIVE_FROM]  DEFAULT (getdate()) FOR [ACTIVE_FROM]
GO
ALTER TABLE [dbo].[SEC_USERS]  WITH CHECK ADD  CONSTRAINT [FK_SEC_USERS_GEN_USER_TYPES] FOREIGN KEY([USER_TYPE_NO])
REFERENCES [dbo].[GEN_USER_TYPES] ([USER_TYPE_NO])
GO
ALTER TABLE [dbo].[SEC_USERS] CHECK CONSTRAINT [FK_SEC_USERS_GEN_USER_TYPES]
GO
ALTER TABLE [dbo].[SEC_USERS]  WITH CHECK ADD  CONSTRAINT [FK_SEC_USERS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SEC_USERS] CHECK CONSTRAINT [FK_SEC_USERS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_ACTIVE_FROM]  DEFAULT (getdate()) FOR [ACTIVE_FROM]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_IS_LOCKED]  DEFAULT ((0)) FOR [IS_LOCKED]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_CAN_VIEW_DATA]  DEFAULT ((0)) FOR [CAN_VIEW_DATA]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_CAN_VIEW_IMAGE]  DEFAULT ((0)) FOR [CAN_VIEW_IMAGE]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_CAN_DO_REQUEST]  DEFAULT ((0)) FOR [CAN_DO_REQUEST]
GO
ALTER TABLE [dbo].[SEC_USERS] ADD  CONSTRAINT [DF_SEC_USERS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[RPT_CLIENT_MONTHLY_IMAGE_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_RPT_CLIENT_MONTHLY_IMAGE_VIEWS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[RPT_CLIENT_MONTHLY_IMAGE_VIEWS] CHECK CONSTRAINT [FK_RPT_CLIENT_MONTHLY_IMAGE_VIEWS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[RPT_CLIENT_MONTHLY_IMAGE_VIEWS] ADD  CONSTRAINT [DF_RPT_CLIENT_MONTHLY_IMAGE_VIEWS_COMPILE_DATE]  DEFAULT (getdate()) FOR [COMPILE_DATE]
GO
ALTER TABLE [dbo].[TRN_IMAGE_VIEWS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_IMAGE_VIEWS_SEC_USERS] FOREIGN KEY([USER_NO])
REFERENCES [dbo].[SEC_USERS] ([USER_NO])
GO
ALTER TABLE [dbo].[TRN_IMAGE_VIEWS] CHECK CONSTRAINT [FK_TRN_IMAGE_VIEWS_SEC_USERS]
GO
ALTER TABLE [dbo].[TRN_IMAGE_VIEWS] ADD  CONSTRAINT [DF_TRN_IMAGE_VIEWS_VIEW_DATE]  DEFAULT (getdate()) FOR [VIEW_DATE]
GO
ALTER TABLE [dbo].[TRN_IMAGE_VIEWS] ADD  CONSTRAINT [DF_TRN_IMAGE_VIEWS_VIEW_TIME]  DEFAULT (getdate()) FOR [VIEW_TIME]
GO
ALTER TABLE [dbo].[TRN_IMAGE_VIEWS] ADD  CONSTRAINT [DF_TRN_IMAGE_VIEWS_IS_COMPILED]  DEFAULT ((0)) FOR [IS_COMPILED]
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS]  WITH CHECK ADD  CONSTRAINT [FK_SEC_ROLE_MENUS_GEN_MENUS] FOREIGN KEY([MENU_NO])
REFERENCES [dbo].[GEN_MENUS] ([MENU_NO])
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS] CHECK CONSTRAINT [FK_SEC_ROLE_MENUS_GEN_MENUS]
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS]  WITH CHECK ADD  CONSTRAINT [FK_SEC_ROLE_MENUS_SEC_ROLES] FOREIGN KEY([ROLE_NO])
REFERENCES [dbo].[SEC_ROLES] ([ROLE_NO])
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS] CHECK CONSTRAINT [FK_SEC_ROLE_MENUS_SEC_ROLES]
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS] ADD  CONSTRAINT [DF_SEC_ROLE_MENUS_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS] ADD  CONSTRAINT [DF_SEC_ROLE_MENUS_ACTIVE_FROM]  DEFAULT (getdate()) FOR [ACTIVE_FROM]
GO
ALTER TABLE [dbo].[SEC_ROLE_MENUS] ADD  CONSTRAINT [DF_SEC_ROLE_MENUS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[GEN_MENU_ACTIONS]  WITH CHECK ADD  CONSTRAINT [FK_GEN_MENU_ACTIONS_GEN_CONTROL_ACTIONS] FOREIGN KEY([ACTION_NO])
REFERENCES [dbo].[GEN_CONTROL_ACTIONS] ([ACTION_NO])
GO
ALTER TABLE [dbo].[GEN_MENU_ACTIONS] CHECK CONSTRAINT [FK_GEN_MENU_ACTIONS_GEN_CONTROL_ACTIONS]
GO
ALTER TABLE [dbo].[GEN_MENU_ACTIONS]  WITH CHECK ADD  CONSTRAINT [FK_GEN_MENU_ACTIONS_GEN_MENUS] FOREIGN KEY([MENU_NO])
REFERENCES [dbo].[GEN_MENUS] ([MENU_NO])
GO
ALTER TABLE [dbo].[GEN_MENU_ACTIONS] CHECK CONSTRAINT [FK_GEN_MENU_ACTIONS_GEN_MENUS]
GO
ALTER TABLE [dbo].[GEN_MENU_ACTIONS] ADD  CONSTRAINT [DF_GEN_MENU_ACTIONS_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[SEC_USER_ROLES]  WITH CHECK ADD  CONSTRAINT [FK_SEC_USER_ROLES_SEC_ROLES] FOREIGN KEY([ROLE_NO])
REFERENCES [dbo].[SEC_ROLES] ([ROLE_NO])
GO
ALTER TABLE [dbo].[SEC_USER_ROLES] CHECK CONSTRAINT [FK_SEC_USER_ROLES_SEC_ROLES]
GO
ALTER TABLE [dbo].[SEC_USER_ROLES]  WITH CHECK ADD  CONSTRAINT [FK_SEC_USER_ROLES_SEC_USERS] FOREIGN KEY([USER_NO])
REFERENCES [dbo].[SEC_USERS] ([USER_NO])
GO
ALTER TABLE [dbo].[SEC_USER_ROLES] CHECK CONSTRAINT [FK_SEC_USER_ROLES_SEC_USERS]
GO
ALTER TABLE [dbo].[SEC_USER_ROLES] ADD  CONSTRAINT [DF_SEC_USER_ROLES_IS_ACTIVE]  DEFAULT ((1)) FOR [IS_ACTIVE]
GO
ALTER TABLE [dbo].[SEC_USER_ROLES] ADD  CONSTRAINT [DF_SEC_USER_ROLES_ACTIVE_FROM]  DEFAULT (getdate()) FOR [ACTIVE_FROM]
GO
ALTER TABLE [dbo].[SEC_USER_ROLES] ADD  CONSTRAINT [DF_SEC_USER_ROLES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_RECALL_BOXES_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] CHECK CONSTRAINT [FK_SET_RECALL_BOXES_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_RECALL_BOXES_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] CHECK CONSTRAINT [FK_SET_RECALL_BOXES_SET_CLIENTS]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES]  WITH CHECK ADD  CONSTRAINT [FK_SET_RECALL_BOXES_SET_RECALL_BOXES] FOREIGN KEY([REF_RECALL_BOX_NO])
REFERENCES [dbo].[SET_RECALL_BOXES] ([RECALL_BOX_NO])
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] CHECK CONSTRAINT [FK_SET_RECALL_BOXES_SET_RECALL_BOXES]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] ADD  CONSTRAINT [DF_SET_RECALL_BOXES_IS_DESTROYED]  DEFAULT ((0)) FOR [IS_DESTROYED]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] ADD  CONSTRAINT [DF_SET_RECALL_BOXES_IS_SPLIT_BOX]  DEFAULT ((0)) FOR [IS_SPLIT_BOX]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] ADD  CONSTRAINT [DF_SET_RECALL_BOXES_IS_NEW_BOX]  DEFAULT ((0)) FOR [IS_NEW_BOX]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] ADD  CONSTRAINT [DF_SET_RECALL_BOXES_IS_MERGE_BOX]  DEFAULT ((0)) FOR [IS_MERGE_BOX]
GO
ALTER TABLE [dbo].[SET_RECALL_BOXES] ADD  CONSTRAINT [DF_SET_RECALL_BOXES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_REQUESTERS]  WITH CHECK ADD  CONSTRAINT [FK_SET_REQUESTERS_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[SET_REQUESTERS] CHECK CONSTRAINT [FK_SET_REQUESTERS_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[SET_REQUESTERS] ADD  CONSTRAINT [DF_SET_REQUESTERS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SEC_USER_LOGONS]  WITH CHECK ADD  CONSTRAINT [FK_SEC_USER_LOGONS_SEC_USERS] FOREIGN KEY([USER_NO])
REFERENCES [dbo].[SEC_USERS] ([USER_NO])
GO
ALTER TABLE [dbo].[SEC_USER_LOGONS] CHECK CONSTRAINT [FK_SEC_USER_LOGONS_SEC_USERS]
GO
ALTER TABLE [dbo].[SEC_USER_LOGONS] ADD  CONSTRAINT [DF_SEC_USER_LOGONS_LOGIN_TIME]  DEFAULT (getdate()) FOR [LOGIN_TIME]
GO
ALTER TABLE [dbo].[SEC_USER_LOGONS] ADD  CONSTRAINT [DF_SEC_USER_LOGONS_IS_LOGGED_IN]  DEFAULT ((1)) FOR [IS_LOGGED_IN]
GO
ALTER TABLE [dbo].[TRN_CHALLANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CHALLANS_GEN_TRANSMIT_TYPES] FOREIGN KEY([TRN_TYPE_NO])
REFERENCES [dbo].[GEN_TRANSMIT_TYPES] ([TRN_TYPE_NO])
GO
ALTER TABLE [dbo].[TRN_CHALLANS] CHECK CONSTRAINT [FK_TRN_CHALLANS_GEN_TRANSMIT_TYPES]
GO
ALTER TABLE [dbo].[TRN_CHALLANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CHALLANS_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[TRN_CHALLANS] CHECK CONSTRAINT [FK_TRN_CHALLANS_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[TRN_CHALLANS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CHALLANS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[TRN_CHALLANS] CHECK CONSTRAINT [FK_TRN_CHALLANS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[TRN_CHALLANS] ADD  CONSTRAINT [DF_TRN_CHALLANS_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[TRN_CHALLANS] ADD  CONSTRAINT [DF_TRN_CHALLANS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[TRN_CHALLAN_DETAILS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_CHALLAN_DETAILS_TRN_CHALLANS] FOREIGN KEY([CHALLAN_NO])
REFERENCES [dbo].[TRN_CHALLANS] ([CHALLAN_NO])
GO
ALTER TABLE [dbo].[TRN_CHALLAN_DETAILS] CHECK CONSTRAINT [FK_TRN_CHALLAN_DETAILS_TRN_CHALLANS]
GO
ALTER TABLE [dbo].[TRN_CHALLAN_DETAILS] ADD  CONSTRAINT [DF_TRN_CHALLAN_DETAILS_IS_DATA_ENTRY]  DEFAULT ((0)) FOR [IS_DATA_ENTRY]
GO
ALTER TABLE [dbo].[TRN_CHALLAN_DETAILS] ADD  CONSTRAINT [DF_TRN_CHALLAN_DETAILS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[SET_BOX_MERGES]  WITH CHECK ADD  CONSTRAINT [FK_SET_BOX_MERGES_SET_RECALL_BOXES] FOREIGN KEY([RECALL_BOX_NO])
REFERENCES [dbo].[SET_RECALL_BOXES] ([RECALL_BOX_NO])
GO
ALTER TABLE [dbo].[SET_BOX_MERGES] CHECK CONSTRAINT [FK_SET_BOX_MERGES_SET_RECALL_BOXES]
GO
ALTER TABLE [dbo].[SET_BOX_MERGES]  WITH CHECK ADD  CONSTRAINT [FK_SET_BOX_MERGES_SET_RECALL_BOXES1] FOREIGN KEY([CHILD_RECALL_BOX_NO])
REFERENCES [dbo].[SET_RECALL_BOXES] ([RECALL_BOX_NO])
GO
ALTER TABLE [dbo].[SET_BOX_MERGES] CHECK CONSTRAINT [FK_SET_BOX_MERGES_SET_RECALL_BOXES1]
GO
ALTER TABLE [dbo].[SET_BOX_MERGES] ADD  CONSTRAINT [DF_SET_BOX_MERGES_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_GEN_TRANSMIT_TYPES] FOREIGN KEY([TRN_TYPE_NO])
REFERENCES [dbo].[GEN_TRANSMIT_TYPES] ([TRN_TYPE_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_GEN_TRANSMIT_TYPES]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_SET_CLIENT_DEPARTMENTS] FOREIGN KEY([DEPT_NO])
REFERENCES [dbo].[SET_CLIENT_DEPARTMENTS] ([DEPT_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_SET_CLIENT_DEPARTMENTS]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_SET_CLIENTS] FOREIGN KEY([CLIENT_NO])
REFERENCES [dbo].[SET_CLIENTS] ([CLIENT_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_SET_CLIENTS]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_SET_PRODUCT_TYPES] FOREIGN KEY([PROD_TYPE_NO])
REFERENCES [dbo].[SET_PRODUCT_TYPES] ([PROD_TYPE_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_SET_PRODUCT_TYPES]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_SET_REASONS] FOREIGN KEY([REASON_NO])
REFERENCES [dbo].[SET_REASONS] ([REASON_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_SET_REASONS]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMITTALS_SET_REQUESTERS] FOREIGN KEY([REQUESTER_NO])
REFERENCES [dbo].[SET_REQUESTERS] ([REQUESTER_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] CHECK CONSTRAINT [FK_TRN_TRANSMITTALS_SET_REQUESTERS]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] ADD  CONSTRAINT [DF_TRN_TRANSMITTALS_IS_NEW_TRANSMIT]  DEFAULT ((1)) FOR [IS_NEW_TRANSMIT]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] ADD  CONSTRAINT [DF_TRN_TRANSMITTALS_IS_OLD_DATA]  DEFAULT ((0)) FOR [IS_OLD_DATA]
GO
ALTER TABLE [dbo].[TRN_TRANSMITTALS] ADD  CONSTRAINT [DF_TRN_TRANSMITTALS_CREATE_TIME]  DEFAULT (getdate()) FOR [CREATE_TIME]
GO
ALTER TABLE [dbo].[TRN_TRANSMIT_REQ_TYPES]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMIT_REQ_TYPES_GEN_TRANSMIT_REQUEST_TYPES] FOREIGN KEY([REQ_TYPE_NO])
REFERENCES [dbo].[GEN_TRANSMIT_REQUEST_TYPES] ([REQ_TYPE_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMIT_REQ_TYPES] CHECK CONSTRAINT [FK_TRN_TRANSMIT_REQ_TYPES_GEN_TRANSMIT_REQUEST_TYPES]
GO
ALTER TABLE [dbo].[TRN_TRANSMIT_REQ_TYPES]  WITH CHECK ADD  CONSTRAINT [FK_TRN_TRANSMIT_REQ_TYPES_TRN_TRANSMITTALS] FOREIGN KEY([TRANSMIT_NO])
REFERENCES [dbo].[TRN_TRANSMITTALS] ([TRANSMIT_NO])
GO
ALTER TABLE [dbo].[TRN_TRANSMIT_REQ_TYPES] CHECK CONSTRAINT [FK_TRN_TRANSMIT_REQ_TYPES_TRN_TRANSMITTALS]
GO
